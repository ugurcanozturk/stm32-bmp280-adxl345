
Borda_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043d0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004558  08004558  00014558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004570  08004570  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004570  08004570  00014570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004578  08004578  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004578  08004578  00014578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800457c  0800457c  0001457c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000017c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000188  20000188  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c667  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c8d  00000000  00000000  0002c6a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f8  00000000  00000000  0002e330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000968  00000000  00000000  0002ed28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021311  00000000  00000000  0002f690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d701  00000000  00000000  000509a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c625f  00000000  00000000  0005e0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00124301  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a48  00000000  00000000  00124354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004540 	.word	0x08004540

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004540 	.word	0x08004540

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b974 	b.w	8000d54 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	468e      	mov	lr, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14d      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4694      	mov	ip, r2
 8000a96:	d969      	bls.n	8000b6c <__udivmoddi4+0xe8>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b152      	cbz	r2, 8000ab4 <__udivmoddi4+0x30>
 8000a9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa2:	f1c2 0120 	rsb	r1, r2, #32
 8000aa6:	fa20 f101 	lsr.w	r1, r0, r1
 8000aaa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aae:	ea41 0e03 	orr.w	lr, r1, r3
 8000ab2:	4094      	lsls	r4, r2
 8000ab4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab8:	0c21      	lsrs	r1, r4, #16
 8000aba:	fbbe f6f8 	udiv	r6, lr, r8
 8000abe:	fa1f f78c 	uxth.w	r7, ip
 8000ac2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ac6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aca:	fb06 f107 	mul.w	r1, r6, r7
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ada:	f080 811f 	bcs.w	8000d1c <__udivmoddi4+0x298>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 811c 	bls.w	8000d1c <__udivmoddi4+0x298>
 8000ae4:	3e02      	subs	r6, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af0:	fb08 3310 	mls	r3, r8, r0, r3
 8000af4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af8:	fb00 f707 	mul.w	r7, r0, r7
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	d90a      	bls.n	8000b16 <__udivmoddi4+0x92>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b08:	f080 810a 	bcs.w	8000d20 <__udivmoddi4+0x29c>
 8000b0c:	42a7      	cmp	r7, r4
 8000b0e:	f240 8107 	bls.w	8000d20 <__udivmoddi4+0x29c>
 8000b12:	4464      	add	r4, ip
 8000b14:	3802      	subs	r0, #2
 8000b16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1a:	1be4      	subs	r4, r4, r7
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	b11d      	cbz	r5, 8000b28 <__udivmoddi4+0xa4>
 8000b20:	40d4      	lsrs	r4, r2
 8000b22:	2300      	movs	r3, #0
 8000b24:	e9c5 4300 	strd	r4, r3, [r5]
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0xc2>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	f000 80ef 	beq.w	8000d16 <__udivmoddi4+0x292>
 8000b38:	2600      	movs	r6, #0
 8000b3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3e:	4630      	mov	r0, r6
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	fab3 f683 	clz	r6, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d14a      	bne.n	8000be4 <__udivmoddi4+0x160>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xd4>
 8000b52:	4282      	cmp	r2, r0
 8000b54:	f200 80f9 	bhi.w	8000d4a <__udivmoddi4+0x2c6>
 8000b58:	1a84      	subs	r4, r0, r2
 8000b5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	469e      	mov	lr, r3
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d0e0      	beq.n	8000b28 <__udivmoddi4+0xa4>
 8000b66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b6a:	e7dd      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000b6c:	b902      	cbnz	r2, 8000b70 <__udivmoddi4+0xec>
 8000b6e:	deff      	udf	#255	; 0xff
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	f040 8092 	bne.w	8000c9e <__udivmoddi4+0x21a>
 8000b7a:	eba1 010c 	sub.w	r1, r1, ip
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2601      	movs	r6, #1
 8000b88:	0c20      	lsrs	r0, r4, #16
 8000b8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b96:	fb0e f003 	mul.w	r0, lr, r3
 8000b9a:	4288      	cmp	r0, r1
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x12c>
 8000b9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x12a>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2c0>
 8000bae:	4643      	mov	r3, r8
 8000bb0:	1a09      	subs	r1, r1, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x156>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x154>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2ca>
 8000bd8:	4608      	mov	r0, r1
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000be2:	e79c      	b.n	8000b1e <__udivmoddi4+0x9a>
 8000be4:	f1c6 0720 	rsb	r7, r6, #32
 8000be8:	40b3      	lsls	r3, r6
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	40f9      	lsrs	r1, r7
 8000bfe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c02:	fa00 f306 	lsl.w	r3, r0, r6
 8000c06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c0a:	0c20      	lsrs	r0, r4, #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fb09 1118 	mls	r1, r9, r8, r1
 8000c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c18:	fb08 f00e 	mul.w	r0, r8, lr
 8000c1c:	4288      	cmp	r0, r1
 8000c1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b8>
 8000c24:	eb1c 0101 	adds.w	r1, ip, r1
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2bc>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2bc>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1a09      	subs	r1, r1, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c44:	fb09 1110 	mls	r1, r9, r0, r1
 8000c48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	458e      	cmp	lr, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1e2>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2b4>
 8000c5e:	458e      	cmp	lr, r1
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2b4>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4461      	add	r1, ip
 8000c66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c6e:	eba1 010e 	sub.w	r1, r1, lr
 8000c72:	42a1      	cmp	r1, r4
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46a6      	mov	lr, r4
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x2a4>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x2a0>
 8000c7c:	b15d      	cbz	r5, 8000c96 <__udivmoddi4+0x212>
 8000c7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c82:	eb61 010e 	sbc.w	r1, r1, lr
 8000c86:	fa01 f707 	lsl.w	r7, r1, r7
 8000c8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c8e:	40f1      	lsrs	r1, r6
 8000c90:	431f      	orrs	r7, r3
 8000c92:	e9c5 7100 	strd	r7, r1, [r5]
 8000c96:	2600      	movs	r6, #0
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	40d8      	lsrs	r0, r3
 8000ca4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4301      	orrs	r1, r0
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc0:	0c0b      	lsrs	r3, r1, #16
 8000cc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x260>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b8>
 8000cdc:	429e      	cmp	r6, r3
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b8>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	b289      	uxth	r1, r1
 8000ce8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cec:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x28a>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000d0a:	3e02      	subs	r6, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	1ac9      	subs	r1, r1, r3
 8000d10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0x104>
 8000d16:	462e      	mov	r6, r5
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e705      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	e6e3      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d20:	4618      	mov	r0, r3
 8000d22:	e6f8      	b.n	8000b16 <__udivmoddi4+0x92>
 8000d24:	454b      	cmp	r3, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f8>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d30:	3801      	subs	r0, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f8>
 8000d34:	4646      	mov	r6, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x28a>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1e2>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x260>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b8>
 8000d44:	3b02      	subs	r3, #2
 8000d46:	4461      	add	r1, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x12c>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e709      	b.n	8000b62 <__udivmoddi4+0xde>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x156>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5c:	f000 fac4 	bl	80012e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d60:	f000 f894 	bl	8000e8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d64:	f000 f954 	bl	8001010 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d68:	f000 f8fa 	bl	8000f60 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000d6c:	f000 f926 	bl	8000fbc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  ADXL345_Init();
 8000d70:	f003 f9bc 	bl	80040ec <ADXL345_Init>
  BMP280_Init();
 8000d74:	f003 fb5c 	bl	8004430 <BMP280_Init>
  BMP280_ReadRaw();
 8000d78:	f003 faf4 	bl	8004364 <BMP280_ReadRaw>
  TrimRead();
 8000d7c:	f003 faba 	bl	80042f4 <TrimRead>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  ADXL345_Read();
 8000d80:	f003 f9da 	bl	8004138 <ADXL345_Read>
	         xg = Raw_X * .0078;
 8000d84:	4b38      	ldr	r3, [pc, #224]	; (8000e68 <main+0x110>)
 8000d86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fb6e 	bl	800046c <__aeabi_i2d>
 8000d90:	a333      	add	r3, pc, #204	; (adr r3, 8000e60 <main+0x108>)
 8000d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d96:	f7ff fbd3 	bl	8000540 <__aeabi_dmul>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	4610      	mov	r0, r2
 8000da0:	4619      	mov	r1, r3
 8000da2:	f7ff fe07 	bl	80009b4 <__aeabi_d2f>
 8000da6:	4603      	mov	r3, r0
 8000da8:	4a30      	ldr	r2, [pc, #192]	; (8000e6c <main+0x114>)
 8000daa:	6013      	str	r3, [r2, #0]
	  	   yg = Raw_Y * .0078;
 8000dac:	4b30      	ldr	r3, [pc, #192]	; (8000e70 <main+0x118>)
 8000dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fb5a 	bl	800046c <__aeabi_i2d>
 8000db8:	a329      	add	r3, pc, #164	; (adr r3, 8000e60 <main+0x108>)
 8000dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dbe:	f7ff fbbf 	bl	8000540 <__aeabi_dmul>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	4610      	mov	r0, r2
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f7ff fdf3 	bl	80009b4 <__aeabi_d2f>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	4a28      	ldr	r2, [pc, #160]	; (8000e74 <main+0x11c>)
 8000dd2:	6013      	str	r3, [r2, #0]
	  	   zg = Raw_Z * .0078;
 8000dd4:	4b28      	ldr	r3, [pc, #160]	; (8000e78 <main+0x120>)
 8000dd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fb46 	bl	800046c <__aeabi_i2d>
 8000de0:	a31f      	add	r3, pc, #124	; (adr r3, 8000e60 <main+0x108>)
 8000de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de6:	f7ff fbab 	bl	8000540 <__aeabi_dmul>
 8000dea:	4602      	mov	r2, r0
 8000dec:	460b      	mov	r3, r1
 8000dee:	4610      	mov	r0, r2
 8000df0:	4619      	mov	r1, r3
 8000df2:	f7ff fddf 	bl	80009b4 <__aeabi_d2f>
 8000df6:	4603      	mov	r3, r0
 8000df8:	4a20      	ldr	r2, [pc, #128]	; (8000e7c <main+0x124>)
 8000dfa:	6013      	str	r3, [r2, #0]
	  	   ADXL345_BufferX(xg);
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <main+0x114>)
 8000dfe:	edd3 7a00 	vldr	s15, [r3]
 8000e02:	eeb0 0a67 	vmov.f32	s0, s15
 8000e06:	f003 f9cd 	bl	80041a4 <ADXL345_BufferX>
	  	   ADXL345_BufferY(yg);
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <main+0x11c>)
 8000e0c:	edd3 7a00 	vldr	s15, [r3]
 8000e10:	eeb0 0a67 	vmov.f32	s0, s15
 8000e14:	f003 f9fe 	bl	8004214 <ADXL345_BufferY>
	  	   ADXL345_BufferZ(zg);
 8000e18:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <main+0x124>)
 8000e1a:	edd3 7a00 	vldr	s15, [r3]
 8000e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8000e22:	f003 fa2f 	bl	8004284 <ADXL345_BufferZ>

	  	 temperature = (BMP280_compensate_T_int32 (tempRaw))/100.0;
 8000e26:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <main+0x128>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f003 fabe 	bl	80043ac <BMP280_compensate_T_int32>
 8000e30:	4603      	mov	r3, r0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fb1a 	bl	800046c <__aeabi_i2d>
 8000e38:	f04f 0200 	mov.w	r2, #0
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <main+0x12c>)
 8000e3e:	f7ff fca9 	bl	8000794 <__aeabi_ddiv>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	4610      	mov	r0, r2
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f7ff fd8b 	bl	8000964 <__aeabi_d2iz>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	4a0d      	ldr	r2, [pc, #52]	; (8000e88 <main+0x130>)
 8000e52:	6013      	str	r3, [r2, #0]

	  	 BMP280_BufferData(temperature);
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <main+0x130>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f003 fb11 	bl	8004480 <BMP280_BufferData>
  {
 8000e5e:	e78f      	b.n	8000d80 <main+0x28>
 8000e60:	8e8a71de 	.word	0x8e8a71de
 8000e64:	3f7ff2e4 	.word	0x3f7ff2e4
 8000e68:	200000c0 	.word	0x200000c0
 8000e6c:	200000c8 	.word	0x200000c8
 8000e70:	200000c2 	.word	0x200000c2
 8000e74:	200000cc 	.word	0x200000cc
 8000e78:	200000c4 	.word	0x200000c4
 8000e7c:	200000d0 	.word	0x200000d0
 8000e80:	20000168 	.word	0x20000168
 8000e84:	40590000 	.word	0x40590000
 8000e88:	200000d4 	.word	0x200000d4

08000e8c <SystemClock_Config>:
  */



void SystemClock_Config(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b094      	sub	sp, #80	; 0x50
 8000e90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e92:	f107 0320 	add.w	r3, r7, #32
 8000e96:	2230      	movs	r2, #48	; 0x30
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f003 fb48 	bl	8004530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	4b28      	ldr	r3, [pc, #160]	; (8000f58 <SystemClock_Config+0xcc>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	4a27      	ldr	r2, [pc, #156]	; (8000f58 <SystemClock_Config+0xcc>)
 8000eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec0:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <SystemClock_Config+0xcc>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ecc:	2300      	movs	r3, #0
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <SystemClock_Config+0xd0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a21      	ldr	r2, [pc, #132]	; (8000f5c <SystemClock_Config+0xd0>)
 8000ed6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <SystemClock_Config+0xd0>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ef6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000efc:	2319      	movs	r3, #25
 8000efe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f00:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f06:	2302      	movs	r3, #2
 8000f08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f0a:	2304      	movs	r3, #4
 8000f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0e:	f107 0320 	add.w	r3, r7, #32
 8000f12:	4618      	mov	r0, r3
 8000f14:	f001 fd7e 	bl	8002a14 <HAL_RCC_OscConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f1e:	f000 f8ad 	bl	800107c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f22:	230f      	movs	r3, #15
 8000f24:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f26:	2302      	movs	r3, #2
 8000f28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f2e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f38:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	2105      	movs	r1, #5
 8000f40:	4618      	mov	r0, r3
 8000f42:	f001 ffdf 	bl	8002f04 <HAL_RCC_ClockConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f4c:	f000 f896 	bl	800107c <Error_Handler>
  }
}
 8000f50:	bf00      	nop
 8000f52:	3750      	adds	r7, #80	; 0x50
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40007000 	.word	0x40007000

08000f60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <MX_I2C1_Init+0x50>)
 8000f66:	4a13      	ldr	r2, [pc, #76]	; (8000fb4 <MX_I2C1_Init+0x54>)
 8000f68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_I2C1_Init+0x50>)
 8000f6c:	4a12      	ldr	r2, [pc, #72]	; (8000fb8 <MX_I2C1_Init+0x58>)
 8000f6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_I2C1_Init+0x50>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_I2C1_Init+0x50>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_I2C1_Init+0x50>)
 8000f7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f84:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <MX_I2C1_Init+0x50>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_I2C1_Init+0x50>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <MX_I2C1_Init+0x50>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_I2C1_Init+0x50>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f9c:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <MX_I2C1_Init+0x50>)
 8000f9e:	f000 fd79 	bl	8001a94 <HAL_I2C_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fa8:	f000 f868 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000028 	.word	0x20000028
 8000fb4:	40005400 	.word	0x40005400
 8000fb8:	000186a0 	.word	0x000186a0

08000fbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <MX_USART1_UART_Init+0x4c>)
 8000fc2:	4a12      	ldr	r2, [pc, #72]	; (800100c <MX_USART1_UART_Init+0x50>)
 8000fc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <MX_USART1_UART_Init+0x4c>)
 8000fc8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <MX_USART1_UART_Init+0x4c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_USART1_UART_Init+0x4c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <MX_USART1_UART_Init+0x4c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <MX_USART1_UART_Init+0x4c>)
 8000fe2:	220c      	movs	r2, #12
 8000fe4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <MX_USART1_UART_Init+0x4c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_USART1_UART_Init+0x4c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_USART1_UART_Init+0x4c>)
 8000ff4:	f002 f966 	bl	80032c4 <HAL_UART_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ffe:	f000 f83d 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	2000007c 	.word	0x2000007c
 800100c:	40011000 	.word	0x40011000

08001010 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	4b17      	ldr	r3, [pc, #92]	; (8001078 <MX_GPIO_Init+0x68>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a16      	ldr	r2, [pc, #88]	; (8001078 <MX_GPIO_Init+0x68>)
 8001020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b14      	ldr	r3, [pc, #80]	; (8001078 <MX_GPIO_Init+0x68>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <MX_GPIO_Init+0x68>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a0f      	ldr	r2, [pc, #60]	; (8001078 <MX_GPIO_Init+0x68>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <MX_GPIO_Init+0x68>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <MX_GPIO_Init+0x68>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a08      	ldr	r2, [pc, #32]	; (8001078 <MX_GPIO_Init+0x68>)
 8001058:	f043 0302 	orr.w	r3, r3, #2
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <MX_GPIO_Init+0x68>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]

}
 800106a:	bf00      	nop
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800

0800107c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001080:	b672      	cpsid	i
}
 8001082:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001084:	e7fe      	b.n	8001084 <Error_Handler+0x8>
	...

08001088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <HAL_MspInit+0x4c>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <HAL_MspInit+0x4c>)
 8001098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109c:	6453      	str	r3, [r2, #68]	; 0x44
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <HAL_MspInit+0x4c>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	603b      	str	r3, [r7, #0]
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <HAL_MspInit+0x4c>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <HAL_MspInit+0x4c>)
 80010b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_MspInit+0x4c>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800

080010d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a19      	ldr	r2, [pc, #100]	; (800115c <HAL_I2C_MspInit+0x84>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d12b      	bne.n	8001152 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	4b18      	ldr	r3, [pc, #96]	; (8001160 <HAL_I2C_MspInit+0x88>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a17      	ldr	r2, [pc, #92]	; (8001160 <HAL_I2C_MspInit+0x88>)
 8001104:	f043 0302 	orr.w	r3, r3, #2
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <HAL_I2C_MspInit+0x88>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001116:	23c0      	movs	r3, #192	; 0xc0
 8001118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800111a:	2312      	movs	r3, #18
 800111c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001122:	2303      	movs	r3, #3
 8001124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001126:	2304      	movs	r3, #4
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4619      	mov	r1, r3
 8001130:	480c      	ldr	r0, [pc, #48]	; (8001164 <HAL_I2C_MspInit+0x8c>)
 8001132:	f000 fb13 	bl	800175c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <HAL_I2C_MspInit+0x88>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	4a08      	ldr	r2, [pc, #32]	; (8001160 <HAL_I2C_MspInit+0x88>)
 8001140:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001144:	6413      	str	r3, [r2, #64]	; 0x40
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_I2C_MspInit+0x88>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001152:	bf00      	nop
 8001154:	3728      	adds	r7, #40	; 0x28
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40005400 	.word	0x40005400
 8001160:	40023800 	.word	0x40023800
 8001164:	40020400 	.word	0x40020400

08001168 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a1d      	ldr	r2, [pc, #116]	; (80011fc <HAL_UART_MspInit+0x94>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d134      	bne.n	80011f4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <HAL_UART_MspInit+0x98>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	4a1b      	ldr	r2, [pc, #108]	; (8001200 <HAL_UART_MspInit+0x98>)
 8001194:	f043 0310 	orr.w	r3, r3, #16
 8001198:	6453      	str	r3, [r2, #68]	; 0x44
 800119a:	4b19      	ldr	r3, [pc, #100]	; (8001200 <HAL_UART_MspInit+0x98>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f003 0310 	and.w	r3, r3, #16
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <HAL_UART_MspInit+0x98>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a14      	ldr	r2, [pc, #80]	; (8001200 <HAL_UART_MspInit+0x98>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <HAL_UART_MspInit+0x98>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011d4:	2307      	movs	r3, #7
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4809      	ldr	r0, [pc, #36]	; (8001204 <HAL_UART_MspInit+0x9c>)
 80011e0:	f000 fabc 	bl	800175c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2100      	movs	r1, #0
 80011e8:	2025      	movs	r0, #37	; 0x25
 80011ea:	f000 f9ee 	bl	80015ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011ee:	2025      	movs	r0, #37	; 0x25
 80011f0:	f000 fa07 	bl	8001602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011f4:	bf00      	nop
 80011f6:	3728      	adds	r7, #40	; 0x28
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40011000 	.word	0x40011000
 8001200:	40023800 	.word	0x40023800
 8001204:	40020000 	.word	0x40020000

08001208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800120c:	e7fe      	b.n	800120c <NMI_Handler+0x4>

0800120e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001212:	e7fe      	b.n	8001212 <HardFault_Handler+0x4>

08001214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <MemManage_Handler+0x4>

0800121a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121e:	e7fe      	b.n	800121e <BusFault_Handler+0x4>

08001220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <UsageFault_Handler+0x4>

08001226 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001254:	f000 f89a 	bl	800138c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}

0800125c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <USART1_IRQHandler+0x10>)
 8001262:	f002 f87d 	bl	8003360 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	2000007c 	.word	0x2000007c

08001270 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <SystemInit+0x20>)
 8001276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800127a:	4a05      	ldr	r2, [pc, #20]	; (8001290 <SystemInit+0x20>)
 800127c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001280:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001298:	480d      	ldr	r0, [pc, #52]	; (80012d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800129a:	490e      	ldr	r1, [pc, #56]	; (80012d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800129c:	4a0e      	ldr	r2, [pc, #56]	; (80012d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a0:	e002      	b.n	80012a8 <LoopCopyDataInit>

080012a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a6:	3304      	adds	r3, #4

080012a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ac:	d3f9      	bcc.n	80012a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ae:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012b0:	4c0b      	ldr	r4, [pc, #44]	; (80012e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b4:	e001      	b.n	80012ba <LoopFillZerobss>

080012b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b8:	3204      	adds	r2, #4

080012ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012bc:	d3fb      	bcc.n	80012b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012be:	f7ff ffd7 	bl	8001270 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012c2:	f003 f911 	bl	80044e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012c6:	f7ff fd47 	bl	8000d58 <main>
  bx  lr    
 80012ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012d8:	08004580 	.word	0x08004580
  ldr r2, =_sbss
 80012dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012e0:	20000188 	.word	0x20000188

080012e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e4:	e7fe      	b.n	80012e4 <ADC_IRQHandler>
	...

080012e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <HAL_Init+0x40>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0d      	ldr	r2, [pc, #52]	; (8001328 <HAL_Init+0x40>)
 80012f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012f8:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <HAL_Init+0x40>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <HAL_Init+0x40>)
 80012fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001302:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <HAL_Init+0x40>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a07      	ldr	r2, [pc, #28]	; (8001328 <HAL_Init+0x40>)
 800130a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800130e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001310:	2003      	movs	r0, #3
 8001312:	f000 f94f 	bl	80015b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001316:	200f      	movs	r0, #15
 8001318:	f000 f808 	bl	800132c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800131c:	f7ff feb4 	bl	8001088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40023c00 	.word	0x40023c00

0800132c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_InitTick+0x54>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_InitTick+0x58>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001342:	fbb3 f3f1 	udiv	r3, r3, r1
 8001346:	fbb2 f3f3 	udiv	r3, r2, r3
 800134a:	4618      	mov	r0, r3
 800134c:	f000 f967 	bl	800161e <HAL_SYSTICK_Config>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e00e      	b.n	8001378 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2b0f      	cmp	r3, #15
 800135e:	d80a      	bhi.n	8001376 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001360:	2200      	movs	r2, #0
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	f04f 30ff 	mov.w	r0, #4294967295
 8001368:	f000 f92f 	bl	80015ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800136c:	4a06      	ldr	r2, [pc, #24]	; (8001388 <HAL_InitTick+0x5c>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
 8001374:	e000      	b.n	8001378 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000000 	.word	0x20000000
 8001384:	20000008 	.word	0x20000008
 8001388:	20000004 	.word	0x20000004

0800138c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_IncTick+0x20>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_IncTick+0x24>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4413      	add	r3, r2
 800139c:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <HAL_IncTick+0x24>)
 800139e:	6013      	str	r3, [r2, #0]
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000008 	.word	0x20000008
 80013b0:	200000d8 	.word	0x200000d8

080013b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return uwTick;
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <HAL_GetTick+0x14>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	200000d8 	.word	0x200000d8

080013cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d4:	f7ff ffee 	bl	80013b4 <HAL_GetTick>
 80013d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e4:	d005      	beq.n	80013f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <HAL_Delay+0x44>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4413      	add	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013f2:	bf00      	nop
 80013f4:	f7ff ffde 	bl	80013b4 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	429a      	cmp	r2, r3
 8001402:	d8f7      	bhi.n	80013f4 <HAL_Delay+0x28>
  {
  }
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000008 	.word	0x20000008

08001414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001430:	4013      	ands	r3, r2
 8001432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800143c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001446:	4a04      	ldr	r2, [pc, #16]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	60d3      	str	r3, [r2, #12]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <__NVIC_GetPriorityGrouping+0x18>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	0a1b      	lsrs	r3, r3, #8
 8001466:	f003 0307 	and.w	r3, r3, #7
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	2b00      	cmp	r3, #0
 8001488:	db0b      	blt.n	80014a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	f003 021f 	and.w	r2, r3, #31
 8001490:	4907      	ldr	r1, [pc, #28]	; (80014b0 <__NVIC_EnableIRQ+0x38>)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	095b      	lsrs	r3, r3, #5
 8001498:	2001      	movs	r0, #1
 800149a:	fa00 f202 	lsl.w	r2, r0, r2
 800149e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000e100 	.word	0xe000e100

080014b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	6039      	str	r1, [r7, #0]
 80014be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	db0a      	blt.n	80014de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	490c      	ldr	r1, [pc, #48]	; (8001500 <__NVIC_SetPriority+0x4c>)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	0112      	lsls	r2, r2, #4
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	440b      	add	r3, r1
 80014d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014dc:	e00a      	b.n	80014f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4908      	ldr	r1, [pc, #32]	; (8001504 <__NVIC_SetPriority+0x50>)
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	3b04      	subs	r3, #4
 80014ec:	0112      	lsls	r2, r2, #4
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	440b      	add	r3, r1
 80014f2:	761a      	strb	r2, [r3, #24]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000e100 	.word	0xe000e100
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001508:	b480      	push	{r7}
 800150a:	b089      	sub	sp, #36	; 0x24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f1c3 0307 	rsb	r3, r3, #7
 8001522:	2b04      	cmp	r3, #4
 8001524:	bf28      	it	cs
 8001526:	2304      	movcs	r3, #4
 8001528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3304      	adds	r3, #4
 800152e:	2b06      	cmp	r3, #6
 8001530:	d902      	bls.n	8001538 <NVIC_EncodePriority+0x30>
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3b03      	subs	r3, #3
 8001536:	e000      	b.n	800153a <NVIC_EncodePriority+0x32>
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	f04f 32ff 	mov.w	r2, #4294967295
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43da      	mvns	r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	401a      	ands	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001550:	f04f 31ff 	mov.w	r1, #4294967295
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	fa01 f303 	lsl.w	r3, r1, r3
 800155a:	43d9      	mvns	r1, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	4313      	orrs	r3, r2
         );
}
 8001562:	4618      	mov	r0, r3
 8001564:	3724      	adds	r7, #36	; 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001580:	d301      	bcc.n	8001586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001582:	2301      	movs	r3, #1
 8001584:	e00f      	b.n	80015a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <SysTick_Config+0x40>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800158e:	210f      	movs	r1, #15
 8001590:	f04f 30ff 	mov.w	r0, #4294967295
 8001594:	f7ff ff8e 	bl	80014b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <SysTick_Config+0x40>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <SysTick_Config+0x40>)
 80015a0:	2207      	movs	r2, #7
 80015a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	e000e010 	.word	0xe000e010

080015b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ff29 	bl	8001414 <__NVIC_SetPriorityGrouping>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b086      	sub	sp, #24
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
 80015d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015dc:	f7ff ff3e 	bl	800145c <__NVIC_GetPriorityGrouping>
 80015e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	6978      	ldr	r0, [r7, #20]
 80015e8:	f7ff ff8e 	bl	8001508 <NVIC_EncodePriority>
 80015ec:	4602      	mov	r2, r0
 80015ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff5d 	bl	80014b4 <__NVIC_SetPriority>
}
 80015fa:	bf00      	nop
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800160c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff31 	bl	8001478 <__NVIC_EnableIRQ>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ffa2 	bl	8001570 <SysTick_Config>
 800162c:	4603      	mov	r3, r0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b084      	sub	sp, #16
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001642:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001644:	f7ff feb6 	bl	80013b4 <HAL_GetTick>
 8001648:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d008      	beq.n	8001668 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2280      	movs	r2, #128	; 0x80
 800165a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e052      	b.n	800170e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 0216 	bic.w	r2, r2, #22
 8001676:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	695a      	ldr	r2, [r3, #20]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001686:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168c:	2b00      	cmp	r3, #0
 800168e:	d103      	bne.n	8001698 <HAL_DMA_Abort+0x62>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001694:	2b00      	cmp	r3, #0
 8001696:	d007      	beq.n	80016a8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 0208 	bic.w	r2, r2, #8
 80016a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 0201 	bic.w	r2, r2, #1
 80016b6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016b8:	e013      	b.n	80016e2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016ba:	f7ff fe7b 	bl	80013b4 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b05      	cmp	r3, #5
 80016c6:	d90c      	bls.n	80016e2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2220      	movs	r2, #32
 80016cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2203      	movs	r2, #3
 80016d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e015      	b.n	800170e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1e4      	bne.n	80016ba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f4:	223f      	movs	r2, #63	; 0x3f
 80016f6:	409a      	lsls	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d004      	beq.n	8001734 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2280      	movs	r2, #128	; 0x80
 800172e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e00c      	b.n	800174e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2205      	movs	r2, #5
 8001738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 0201 	bic.w	r2, r2, #1
 800174a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	; 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800176e:	2300      	movs	r3, #0
 8001770:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
 8001776:	e16b      	b.n	8001a50 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001778:	2201      	movs	r2, #1
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	429a      	cmp	r2, r3
 8001792:	f040 815a 	bne.w	8001a4a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d005      	beq.n	80017ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d130      	bne.n	8001810 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	2203      	movs	r2, #3
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4013      	ands	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017e4:	2201      	movs	r2, #1
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	091b      	lsrs	r3, r3, #4
 80017fa:	f003 0201 	and.w	r2, r3, #1
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b03      	cmp	r3, #3
 800181a:	d017      	beq.n	800184c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	2203      	movs	r2, #3
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d123      	bne.n	80018a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	08da      	lsrs	r2, r3, #3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3208      	adds	r2, #8
 8001860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001864:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	220f      	movs	r2, #15
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	691a      	ldr	r2, [r3, #16]
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	08da      	lsrs	r2, r3, #3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3208      	adds	r2, #8
 800189a:	69b9      	ldr	r1, [r7, #24]
 800189c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	2203      	movs	r2, #3
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0203 	and.w	r2, r3, #3
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 80b4 	beq.w	8001a4a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	4b60      	ldr	r3, [pc, #384]	; (8001a68 <HAL_GPIO_Init+0x30c>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	4a5f      	ldr	r2, [pc, #380]	; (8001a68 <HAL_GPIO_Init+0x30c>)
 80018ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f0:	6453      	str	r3, [r2, #68]	; 0x44
 80018f2:	4b5d      	ldr	r3, [pc, #372]	; (8001a68 <HAL_GPIO_Init+0x30c>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018fe:	4a5b      	ldr	r2, [pc, #364]	; (8001a6c <HAL_GPIO_Init+0x310>)
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	089b      	lsrs	r3, r3, #2
 8001904:	3302      	adds	r3, #2
 8001906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	220f      	movs	r2, #15
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4013      	ands	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a52      	ldr	r2, [pc, #328]	; (8001a70 <HAL_GPIO_Init+0x314>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d02b      	beq.n	8001982 <HAL_GPIO_Init+0x226>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a51      	ldr	r2, [pc, #324]	; (8001a74 <HAL_GPIO_Init+0x318>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d025      	beq.n	800197e <HAL_GPIO_Init+0x222>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a50      	ldr	r2, [pc, #320]	; (8001a78 <HAL_GPIO_Init+0x31c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d01f      	beq.n	800197a <HAL_GPIO_Init+0x21e>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a4f      	ldr	r2, [pc, #316]	; (8001a7c <HAL_GPIO_Init+0x320>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d019      	beq.n	8001976 <HAL_GPIO_Init+0x21a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a4e      	ldr	r2, [pc, #312]	; (8001a80 <HAL_GPIO_Init+0x324>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d013      	beq.n	8001972 <HAL_GPIO_Init+0x216>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4d      	ldr	r2, [pc, #308]	; (8001a84 <HAL_GPIO_Init+0x328>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d00d      	beq.n	800196e <HAL_GPIO_Init+0x212>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4c      	ldr	r2, [pc, #304]	; (8001a88 <HAL_GPIO_Init+0x32c>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d007      	beq.n	800196a <HAL_GPIO_Init+0x20e>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a4b      	ldr	r2, [pc, #300]	; (8001a8c <HAL_GPIO_Init+0x330>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d101      	bne.n	8001966 <HAL_GPIO_Init+0x20a>
 8001962:	2307      	movs	r3, #7
 8001964:	e00e      	b.n	8001984 <HAL_GPIO_Init+0x228>
 8001966:	2308      	movs	r3, #8
 8001968:	e00c      	b.n	8001984 <HAL_GPIO_Init+0x228>
 800196a:	2306      	movs	r3, #6
 800196c:	e00a      	b.n	8001984 <HAL_GPIO_Init+0x228>
 800196e:	2305      	movs	r3, #5
 8001970:	e008      	b.n	8001984 <HAL_GPIO_Init+0x228>
 8001972:	2304      	movs	r3, #4
 8001974:	e006      	b.n	8001984 <HAL_GPIO_Init+0x228>
 8001976:	2303      	movs	r3, #3
 8001978:	e004      	b.n	8001984 <HAL_GPIO_Init+0x228>
 800197a:	2302      	movs	r3, #2
 800197c:	e002      	b.n	8001984 <HAL_GPIO_Init+0x228>
 800197e:	2301      	movs	r3, #1
 8001980:	e000      	b.n	8001984 <HAL_GPIO_Init+0x228>
 8001982:	2300      	movs	r3, #0
 8001984:	69fa      	ldr	r2, [r7, #28]
 8001986:	f002 0203 	and.w	r2, r2, #3
 800198a:	0092      	lsls	r2, r2, #2
 800198c:	4093      	lsls	r3, r2
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001994:	4935      	ldr	r1, [pc, #212]	; (8001a6c <HAL_GPIO_Init+0x310>)
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	089b      	lsrs	r3, r3, #2
 800199a:	3302      	adds	r3, #2
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019a2:	4b3b      	ldr	r3, [pc, #236]	; (8001a90 <HAL_GPIO_Init+0x334>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019c6:	4a32      	ldr	r2, [pc, #200]	; (8001a90 <HAL_GPIO_Init+0x334>)
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019cc:	4b30      	ldr	r3, [pc, #192]	; (8001a90 <HAL_GPIO_Init+0x334>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019f0:	4a27      	ldr	r2, [pc, #156]	; (8001a90 <HAL_GPIO_Init+0x334>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019f6:	4b26      	ldr	r3, [pc, #152]	; (8001a90 <HAL_GPIO_Init+0x334>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a1a:	4a1d      	ldr	r2, [pc, #116]	; (8001a90 <HAL_GPIO_Init+0x334>)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a20:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <HAL_GPIO_Init+0x334>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a44:	4a12      	ldr	r2, [pc, #72]	; (8001a90 <HAL_GPIO_Init+0x334>)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	61fb      	str	r3, [r7, #28]
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	2b0f      	cmp	r3, #15
 8001a54:	f67f ae90 	bls.w	8001778 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	3724      	adds	r7, #36	; 0x24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40013800 	.word	0x40013800
 8001a70:	40020000 	.word	0x40020000
 8001a74:	40020400 	.word	0x40020400
 8001a78:	40020800 	.word	0x40020800
 8001a7c:	40020c00 	.word	0x40020c00
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40021400 	.word	0x40021400
 8001a88:	40021800 	.word	0x40021800
 8001a8c:	40021c00 	.word	0x40021c00
 8001a90:	40013c00 	.word	0x40013c00

08001a94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e12b      	b.n	8001cfe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d106      	bne.n	8001ac0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff fb0c 	bl	80010d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2224      	movs	r2, #36	; 0x24
 8001ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0201 	bic.w	r2, r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ae6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001af6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001af8:	f001 fbbc 	bl	8003274 <HAL_RCC_GetPCLK1Freq>
 8001afc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	4a81      	ldr	r2, [pc, #516]	; (8001d08 <HAL_I2C_Init+0x274>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d807      	bhi.n	8001b18 <HAL_I2C_Init+0x84>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4a80      	ldr	r2, [pc, #512]	; (8001d0c <HAL_I2C_Init+0x278>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	bf94      	ite	ls
 8001b10:	2301      	movls	r3, #1
 8001b12:	2300      	movhi	r3, #0
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	e006      	b.n	8001b26 <HAL_I2C_Init+0x92>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4a7d      	ldr	r2, [pc, #500]	; (8001d10 <HAL_I2C_Init+0x27c>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	bf94      	ite	ls
 8001b20:	2301      	movls	r3, #1
 8001b22:	2300      	movhi	r3, #0
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e0e7      	b.n	8001cfe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4a78      	ldr	r2, [pc, #480]	; (8001d14 <HAL_I2C_Init+0x280>)
 8001b32:	fba2 2303 	umull	r2, r3, r2, r3
 8001b36:	0c9b      	lsrs	r3, r3, #18
 8001b38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	4a6a      	ldr	r2, [pc, #424]	; (8001d08 <HAL_I2C_Init+0x274>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d802      	bhi.n	8001b68 <HAL_I2C_Init+0xd4>
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	3301      	adds	r3, #1
 8001b66:	e009      	b.n	8001b7c <HAL_I2C_Init+0xe8>
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b6e:	fb02 f303 	mul.w	r3, r2, r3
 8001b72:	4a69      	ldr	r2, [pc, #420]	; (8001d18 <HAL_I2C_Init+0x284>)
 8001b74:	fba2 2303 	umull	r2, r3, r2, r3
 8001b78:	099b      	lsrs	r3, r3, #6
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	430b      	orrs	r3, r1
 8001b82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	495c      	ldr	r1, [pc, #368]	; (8001d08 <HAL_I2C_Init+0x274>)
 8001b98:	428b      	cmp	r3, r1
 8001b9a:	d819      	bhi.n	8001bd0 <HAL_I2C_Init+0x13c>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1e59      	subs	r1, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001baa:	1c59      	adds	r1, r3, #1
 8001bac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001bb0:	400b      	ands	r3, r1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00a      	beq.n	8001bcc <HAL_I2C_Init+0x138>
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	1e59      	subs	r1, r3, #1
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bca:	e051      	b.n	8001c70 <HAL_I2C_Init+0x1dc>
 8001bcc:	2304      	movs	r3, #4
 8001bce:	e04f      	b.n	8001c70 <HAL_I2C_Init+0x1dc>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d111      	bne.n	8001bfc <HAL_I2C_Init+0x168>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	1e58      	subs	r0, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6859      	ldr	r1, [r3, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	440b      	add	r3, r1
 8001be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bea:	3301      	adds	r3, #1
 8001bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	bf0c      	ite	eq
 8001bf4:	2301      	moveq	r3, #1
 8001bf6:	2300      	movne	r3, #0
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	e012      	b.n	8001c22 <HAL_I2C_Init+0x18e>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1e58      	subs	r0, r3, #1
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6859      	ldr	r1, [r3, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	440b      	add	r3, r1
 8001c0a:	0099      	lsls	r1, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c12:	3301      	adds	r3, #1
 8001c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	bf0c      	ite	eq
 8001c1c:	2301      	moveq	r3, #1
 8001c1e:	2300      	movne	r3, #0
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_I2C_Init+0x196>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e022      	b.n	8001c70 <HAL_I2C_Init+0x1dc>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10e      	bne.n	8001c50 <HAL_I2C_Init+0x1bc>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	1e58      	subs	r0, r3, #1
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6859      	ldr	r1, [r3, #4]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	440b      	add	r3, r1
 8001c40:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c44:	3301      	adds	r3, #1
 8001c46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c4e:	e00f      	b.n	8001c70 <HAL_I2C_Init+0x1dc>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	1e58      	subs	r0, r3, #1
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6859      	ldr	r1, [r3, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	0099      	lsls	r1, r3, #2
 8001c60:	440b      	add	r3, r1
 8001c62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c66:	3301      	adds	r3, #1
 8001c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	6809      	ldr	r1, [r1, #0]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69da      	ldr	r2, [r3, #28]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6911      	ldr	r1, [r2, #16]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	68d2      	ldr	r2, [r2, #12]
 8001caa:	4311      	orrs	r1, r2
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	430b      	orrs	r3, r1
 8001cb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695a      	ldr	r2, [r3, #20]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0201 	orr.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2220      	movs	r2, #32
 8001cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	000186a0 	.word	0x000186a0
 8001d0c:	001e847f 	.word	0x001e847f
 8001d10:	003d08ff 	.word	0x003d08ff
 8001d14:	431bde83 	.word	0x431bde83
 8001d18:	10624dd3 	.word	0x10624dd3

08001d1c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af02      	add	r7, sp, #8
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	4608      	mov	r0, r1
 8001d26:	4611      	mov	r1, r2
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	817b      	strh	r3, [r7, #10]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	813b      	strh	r3, [r7, #8]
 8001d32:	4613      	mov	r3, r2
 8001d34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d36:	f7ff fb3d 	bl	80013b4 <HAL_GetTick>
 8001d3a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b20      	cmp	r3, #32
 8001d46:	f040 80d9 	bne.w	8001efc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	2319      	movs	r3, #25
 8001d50:	2201      	movs	r2, #1
 8001d52:	496d      	ldr	r1, [pc, #436]	; (8001f08 <HAL_I2C_Mem_Write+0x1ec>)
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f000 fc7f 	bl	8002658 <I2C_WaitOnFlagUntilTimeout>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001d60:	2302      	movs	r3, #2
 8001d62:	e0cc      	b.n	8001efe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d101      	bne.n	8001d72 <HAL_I2C_Mem_Write+0x56>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e0c5      	b.n	8001efe <HAL_I2C_Mem_Write+0x1e2>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d007      	beq.n	8001d98 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0201 	orr.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001da6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2221      	movs	r2, #33	; 0x21
 8001dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2240      	movs	r2, #64	; 0x40
 8001db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6a3a      	ldr	r2, [r7, #32]
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4a4d      	ldr	r2, [pc, #308]	; (8001f0c <HAL_I2C_Mem_Write+0x1f0>)
 8001dd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001dda:	88f8      	ldrh	r0, [r7, #6]
 8001ddc:	893a      	ldrh	r2, [r7, #8]
 8001dde:	8979      	ldrh	r1, [r7, #10]
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	9301      	str	r3, [sp, #4]
 8001de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	4603      	mov	r3, r0
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 fab6 	bl	800235c <I2C_RequestMemoryWrite>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d052      	beq.n	8001e9c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e081      	b.n	8001efe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 fd00 	bl	8002804 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00d      	beq.n	8001e26 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d107      	bne.n	8001e22 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e06b      	b.n	8001efe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	781a      	ldrb	r2, [r3, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e40:	3b01      	subs	r3, #1
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d11b      	bne.n	8001e9c <HAL_I2C_Mem_Write+0x180>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d017      	beq.n	8001e9c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	781a      	ldrb	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	1c5a      	adds	r2, r3, #1
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e86:	3b01      	subs	r3, #1
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	3b01      	subs	r3, #1
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1aa      	bne.n	8001dfa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f000 fcec 	bl	8002886 <I2C_WaitOnBTFFlagUntilTimeout>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00d      	beq.n	8001ed0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d107      	bne.n	8001ecc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e016      	b.n	8001efe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ede:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	e000      	b.n	8001efe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001efc:	2302      	movs	r3, #2
  }
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	00100002 	.word	0x00100002
 8001f0c:	ffff0000 	.word	0xffff0000

08001f10 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08c      	sub	sp, #48	; 0x30
 8001f14:	af02      	add	r7, sp, #8
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	4608      	mov	r0, r1
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4603      	mov	r3, r0
 8001f20:	817b      	strh	r3, [r7, #10]
 8001f22:	460b      	mov	r3, r1
 8001f24:	813b      	strh	r3, [r7, #8]
 8001f26:	4613      	mov	r3, r2
 8001f28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f2a:	f7ff fa43 	bl	80013b4 <HAL_GetTick>
 8001f2e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b20      	cmp	r3, #32
 8001f3a:	f040 8208 	bne.w	800234e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	2319      	movs	r3, #25
 8001f44:	2201      	movs	r2, #1
 8001f46:	497b      	ldr	r1, [pc, #492]	; (8002134 <HAL_I2C_Mem_Read+0x224>)
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 fb85 	bl	8002658 <I2C_WaitOnFlagUntilTimeout>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001f54:	2302      	movs	r3, #2
 8001f56:	e1fb      	b.n	8002350 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d101      	bne.n	8001f66 <HAL_I2C_Mem_Read+0x56>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e1f4      	b.n	8002350 <HAL_I2C_Mem_Read+0x440>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d007      	beq.n	8001f8c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0201 	orr.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2222      	movs	r2, #34	; 0x22
 8001fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2240      	movs	r2, #64	; 0x40
 8001fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001fbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4a5b      	ldr	r2, [pc, #364]	; (8002138 <HAL_I2C_Mem_Read+0x228>)
 8001fcc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fce:	88f8      	ldrh	r0, [r7, #6]
 8001fd0:	893a      	ldrh	r2, [r7, #8]
 8001fd2:	8979      	ldrh	r1, [r7, #10]
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	9301      	str	r3, [sp, #4]
 8001fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	4603      	mov	r3, r0
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 fa52 	bl	8002488 <I2C_RequestMemoryRead>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e1b0      	b.n	8002350 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d113      	bne.n	800201e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	623b      	str	r3, [r7, #32]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	623b      	str	r3, [r7, #32]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	623b      	str	r3, [r7, #32]
 800200a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	e184      	b.n	8002328 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002022:	2b01      	cmp	r3, #1
 8002024:	d11b      	bne.n	800205e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002034:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	61fb      	str	r3, [r7, #28]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	61fb      	str	r3, [r7, #28]
 800204a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	e164      	b.n	8002328 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002062:	2b02      	cmp	r3, #2
 8002064:	d11b      	bne.n	800209e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002074:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002084:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002086:	2300      	movs	r3, #0
 8002088:	61bb      	str	r3, [r7, #24]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	61bb      	str	r3, [r7, #24]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	61bb      	str	r3, [r7, #24]
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	e144      	b.n	8002328 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	617b      	str	r3, [r7, #20]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80020b4:	e138      	b.n	8002328 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	f200 80f1 	bhi.w	80022a2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d123      	bne.n	8002110 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 fc1b 	bl	8002908 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e139      	b.n	8002350 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691a      	ldr	r2, [r3, #16]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f8:	3b01      	subs	r3, #1
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002104:	b29b      	uxth	r3, r3
 8002106:	3b01      	subs	r3, #1
 8002108:	b29a      	uxth	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800210e:	e10b      	b.n	8002328 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002114:	2b02      	cmp	r3, #2
 8002116:	d14e      	bne.n	80021b6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800211e:	2200      	movs	r2, #0
 8002120:	4906      	ldr	r1, [pc, #24]	; (800213c <HAL_I2C_Mem_Read+0x22c>)
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 fa98 	bl	8002658 <I2C_WaitOnFlagUntilTimeout>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d008      	beq.n	8002140 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e10e      	b.n	8002350 <HAL_I2C_Mem_Read+0x440>
 8002132:	bf00      	nop
 8002134:	00100002 	.word	0x00100002
 8002138:	ffff0000 	.word	0xffff0000
 800213c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800214e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691a      	ldr	r2, [r3, #16]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216c:	3b01      	subs	r3, #1
 800216e:	b29a      	uxth	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002178:	b29b      	uxth	r3, r3
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	691a      	ldr	r2, [r3, #16]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219e:	3b01      	subs	r3, #1
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021b4:	e0b8      	b.n	8002328 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021bc:	2200      	movs	r2, #0
 80021be:	4966      	ldr	r1, [pc, #408]	; (8002358 <HAL_I2C_Mem_Read+0x448>)
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 fa49 	bl	8002658 <I2C_WaitOnFlagUntilTimeout>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0bf      	b.n	8002350 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691a      	ldr	r2, [r3, #16]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fc:	3b01      	subs	r3, #1
 80021fe:	b29a      	uxth	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002208:	b29b      	uxth	r3, r3
 800220a:	3b01      	subs	r3, #1
 800220c:	b29a      	uxth	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002218:	2200      	movs	r2, #0
 800221a:	494f      	ldr	r1, [pc, #316]	; (8002358 <HAL_I2C_Mem_Read+0x448>)
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f000 fa1b 	bl	8002658 <I2C_WaitOnFlagUntilTimeout>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e091      	b.n	8002350 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800223a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	691a      	ldr	r2, [r3, #16]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	1c5a      	adds	r2, r3, #1
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002258:	3b01      	subs	r3, #1
 800225a:	b29a      	uxth	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002264:	b29b      	uxth	r3, r3
 8002266:	3b01      	subs	r3, #1
 8002268:	b29a      	uxth	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	1c5a      	adds	r2, r3, #1
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228a:	3b01      	subs	r3, #1
 800228c:	b29a      	uxth	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002296:	b29b      	uxth	r3, r3
 8002298:	3b01      	subs	r3, #1
 800229a:	b29a      	uxth	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022a0:	e042      	b.n	8002328 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 fb2e 	bl	8002908 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e04c      	b.n	8002350 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022de:	b29b      	uxth	r3, r3
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d118      	bne.n	8002328 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	1c5a      	adds	r2, r3, #1
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002312:	3b01      	subs	r3, #1
 8002314:	b29a      	uxth	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231e:	b29b      	uxth	r3, r3
 8002320:	3b01      	subs	r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232c:	2b00      	cmp	r3, #0
 800232e:	f47f aec2 	bne.w	80020b6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2220      	movs	r2, #32
 8002336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800234a:	2300      	movs	r3, #0
 800234c:	e000      	b.n	8002350 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800234e:	2302      	movs	r3, #2
  }
}
 8002350:	4618      	mov	r0, r3
 8002352:	3728      	adds	r7, #40	; 0x28
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	00010004 	.word	0x00010004

0800235c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af02      	add	r7, sp, #8
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	4608      	mov	r0, r1
 8002366:	4611      	mov	r1, r2
 8002368:	461a      	mov	r2, r3
 800236a:	4603      	mov	r3, r0
 800236c:	817b      	strh	r3, [r7, #10]
 800236e:	460b      	mov	r3, r1
 8002370:	813b      	strh	r3, [r7, #8]
 8002372:	4613      	mov	r3, r2
 8002374:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002384:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	2200      	movs	r2, #0
 800238e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 f960 	bl	8002658 <I2C_WaitOnFlagUntilTimeout>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00d      	beq.n	80023ba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023ac:	d103      	bne.n	80023b6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e05f      	b.n	800247a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023ba:	897b      	ldrh	r3, [r7, #10]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	461a      	mov	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	6a3a      	ldr	r2, [r7, #32]
 80023ce:	492d      	ldr	r1, [pc, #180]	; (8002484 <I2C_RequestMemoryWrite+0x128>)
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 f998 	bl	8002706 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e04c      	b.n	800247a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	617b      	str	r3, [r7, #20]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f8:	6a39      	ldr	r1, [r7, #32]
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 fa02 	bl	8002804 <I2C_WaitOnTXEFlagUntilTimeout>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00d      	beq.n	8002422 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	2b04      	cmp	r3, #4
 800240c:	d107      	bne.n	800241e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800241c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e02b      	b.n	800247a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002422:	88fb      	ldrh	r3, [r7, #6]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d105      	bne.n	8002434 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002428:	893b      	ldrh	r3, [r7, #8]
 800242a:	b2da      	uxtb	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	611a      	str	r2, [r3, #16]
 8002432:	e021      	b.n	8002478 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002434:	893b      	ldrh	r3, [r7, #8]
 8002436:	0a1b      	lsrs	r3, r3, #8
 8002438:	b29b      	uxth	r3, r3
 800243a:	b2da      	uxtb	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002444:	6a39      	ldr	r1, [r7, #32]
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 f9dc 	bl	8002804 <I2C_WaitOnTXEFlagUntilTimeout>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00d      	beq.n	800246e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	2b04      	cmp	r3, #4
 8002458:	d107      	bne.n	800246a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002468:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e005      	b.n	800247a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800246e:	893b      	ldrh	r3, [r7, #8]
 8002470:	b2da      	uxtb	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	00010002 	.word	0x00010002

08002488 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af02      	add	r7, sp, #8
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	4608      	mov	r0, r1
 8002492:	4611      	mov	r1, r2
 8002494:	461a      	mov	r2, r3
 8002496:	4603      	mov	r3, r0
 8002498:	817b      	strh	r3, [r7, #10]
 800249a:	460b      	mov	r3, r1
 800249c:	813b      	strh	r3, [r7, #8]
 800249e:	4613      	mov	r3, r2
 80024a0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024b0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 f8c2 	bl	8002658 <I2C_WaitOnFlagUntilTimeout>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00d      	beq.n	80024f6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024e8:	d103      	bne.n	80024f2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e0aa      	b.n	800264c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024f6:	897b      	ldrh	r3, [r7, #10]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	461a      	mov	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002504:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	6a3a      	ldr	r2, [r7, #32]
 800250a:	4952      	ldr	r1, [pc, #328]	; (8002654 <I2C_RequestMemoryRead+0x1cc>)
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 f8fa 	bl	8002706 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e097      	b.n	800264c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002534:	6a39      	ldr	r1, [r7, #32]
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 f964 	bl	8002804 <I2C_WaitOnTXEFlagUntilTimeout>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00d      	beq.n	800255e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	2b04      	cmp	r3, #4
 8002548:	d107      	bne.n	800255a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002558:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e076      	b.n	800264c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d105      	bne.n	8002570 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002564:	893b      	ldrh	r3, [r7, #8]
 8002566:	b2da      	uxtb	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	611a      	str	r2, [r3, #16]
 800256e:	e021      	b.n	80025b4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002570:	893b      	ldrh	r3, [r7, #8]
 8002572:	0a1b      	lsrs	r3, r3, #8
 8002574:	b29b      	uxth	r3, r3
 8002576:	b2da      	uxtb	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800257e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002580:	6a39      	ldr	r1, [r7, #32]
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 f93e 	bl	8002804 <I2C_WaitOnTXEFlagUntilTimeout>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00d      	beq.n	80025aa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	2b04      	cmp	r3, #4
 8002594:	d107      	bne.n	80025a6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e050      	b.n	800264c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025aa:	893b      	ldrh	r3, [r7, #8]
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b6:	6a39      	ldr	r1, [r7, #32]
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 f923 	bl	8002804 <I2C_WaitOnTXEFlagUntilTimeout>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00d      	beq.n	80025e0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d107      	bne.n	80025dc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025da:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e035      	b.n	800264c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 f82b 	bl	8002658 <I2C_WaitOnFlagUntilTimeout>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00d      	beq.n	8002624 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002616:	d103      	bne.n	8002620 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800261e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e013      	b.n	800264c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002624:	897b      	ldrh	r3, [r7, #10]
 8002626:	b2db      	uxtb	r3, r3
 8002628:	f043 0301 	orr.w	r3, r3, #1
 800262c:	b2da      	uxtb	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	6a3a      	ldr	r2, [r7, #32]
 8002638:	4906      	ldr	r1, [pc, #24]	; (8002654 <I2C_RequestMemoryRead+0x1cc>)
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 f863 	bl	8002706 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	00010002 	.word	0x00010002

08002658 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	603b      	str	r3, [r7, #0]
 8002664:	4613      	mov	r3, r2
 8002666:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002668:	e025      	b.n	80026b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002670:	d021      	beq.n	80026b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002672:	f7fe fe9f 	bl	80013b4 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d302      	bcc.n	8002688 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d116      	bne.n	80026b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2220      	movs	r2, #32
 8002692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f043 0220 	orr.w	r2, r3, #32
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e023      	b.n	80026fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	0c1b      	lsrs	r3, r3, #16
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d10d      	bne.n	80026dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	43da      	mvns	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	4013      	ands	r3, r2
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	bf0c      	ite	eq
 80026d2:	2301      	moveq	r3, #1
 80026d4:	2300      	movne	r3, #0
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	461a      	mov	r2, r3
 80026da:	e00c      	b.n	80026f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	43da      	mvns	r2, r3
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	4013      	ands	r3, r2
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	bf0c      	ite	eq
 80026ee:	2301      	moveq	r3, #1
 80026f0:	2300      	movne	r3, #0
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	461a      	mov	r2, r3
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d0b6      	beq.n	800266a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b084      	sub	sp, #16
 800270a:	af00      	add	r7, sp, #0
 800270c:	60f8      	str	r0, [r7, #12]
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
 8002712:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002714:	e051      	b.n	80027ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002724:	d123      	bne.n	800276e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002734:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800273e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2220      	movs	r2, #32
 800274a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f043 0204 	orr.w	r2, r3, #4
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e046      	b.n	80027fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002774:	d021      	beq.n	80027ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002776:	f7fe fe1d 	bl	80013b4 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	429a      	cmp	r2, r3
 8002784:	d302      	bcc.n	800278c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d116      	bne.n	80027ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2220      	movs	r2, #32
 8002796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f043 0220 	orr.w	r2, r3, #32
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e020      	b.n	80027fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	0c1b      	lsrs	r3, r3, #16
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d10c      	bne.n	80027de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	43da      	mvns	r2, r3
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	4013      	ands	r3, r2
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	bf14      	ite	ne
 80027d6:	2301      	movne	r3, #1
 80027d8:	2300      	moveq	r3, #0
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	e00b      	b.n	80027f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	43da      	mvns	r2, r3
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	4013      	ands	r3, r2
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	bf14      	ite	ne
 80027f0:	2301      	movne	r3, #1
 80027f2:	2300      	moveq	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d18d      	bne.n	8002716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002810:	e02d      	b.n	800286e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 f8ce 	bl	80029b4 <I2C_IsAcknowledgeFailed>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e02d      	b.n	800287e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002828:	d021      	beq.n	800286e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800282a:	f7fe fdc3 	bl	80013b4 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	429a      	cmp	r2, r3
 8002838:	d302      	bcc.n	8002840 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d116      	bne.n	800286e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2220      	movs	r2, #32
 800284a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f043 0220 	orr.w	r2, r3, #32
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e007      	b.n	800287e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002878:	2b80      	cmp	r3, #128	; 0x80
 800287a:	d1ca      	bne.n	8002812 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b084      	sub	sp, #16
 800288a:	af00      	add	r7, sp, #0
 800288c:	60f8      	str	r0, [r7, #12]
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002892:	e02d      	b.n	80028f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 f88d 	bl	80029b4 <I2C_IsAcknowledgeFailed>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e02d      	b.n	8002900 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028aa:	d021      	beq.n	80028f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ac:	f7fe fd82 	bl	80013b4 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d302      	bcc.n	80028c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d116      	bne.n	80028f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	f043 0220 	orr.w	r2, r3, #32
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e007      	b.n	8002900 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d1ca      	bne.n	8002894 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002914:	e042      	b.n	800299c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	f003 0310 	and.w	r3, r3, #16
 8002920:	2b10      	cmp	r3, #16
 8002922:	d119      	bne.n	8002958 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0210 	mvn.w	r2, #16
 800292c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2220      	movs	r2, #32
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e029      	b.n	80029ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002958:	f7fe fd2c 	bl	80013b4 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	429a      	cmp	r2, r3
 8002966:	d302      	bcc.n	800296e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d116      	bne.n	800299c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	f043 0220 	orr.w	r2, r3, #32
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e007      	b.n	80029ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a6:	2b40      	cmp	r3, #64	; 0x40
 80029a8:	d1b5      	bne.n	8002916 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ca:	d11b      	bne.n	8002a04 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2220      	movs	r2, #32
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	f043 0204 	orr.w	r2, r3, #4
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e267      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d075      	beq.n	8002b1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a32:	4b88      	ldr	r3, [pc, #544]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 030c 	and.w	r3, r3, #12
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d00c      	beq.n	8002a58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a3e:	4b85      	ldr	r3, [pc, #532]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d112      	bne.n	8002a70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a4a:	4b82      	ldr	r3, [pc, #520]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a56:	d10b      	bne.n	8002a70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a58:	4b7e      	ldr	r3, [pc, #504]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d05b      	beq.n	8002b1c <HAL_RCC_OscConfig+0x108>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d157      	bne.n	8002b1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e242      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a78:	d106      	bne.n	8002a88 <HAL_RCC_OscConfig+0x74>
 8002a7a:	4b76      	ldr	r3, [pc, #472]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a75      	ldr	r2, [pc, #468]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	e01d      	b.n	8002ac4 <HAL_RCC_OscConfig+0xb0>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a90:	d10c      	bne.n	8002aac <HAL_RCC_OscConfig+0x98>
 8002a92:	4b70      	ldr	r3, [pc, #448]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a6f      	ldr	r2, [pc, #444]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	4b6d      	ldr	r3, [pc, #436]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a6c      	ldr	r2, [pc, #432]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	e00b      	b.n	8002ac4 <HAL_RCC_OscConfig+0xb0>
 8002aac:	4b69      	ldr	r3, [pc, #420]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a68      	ldr	r2, [pc, #416]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab6:	6013      	str	r3, [r2, #0]
 8002ab8:	4b66      	ldr	r3, [pc, #408]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a65      	ldr	r2, [pc, #404]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002abe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ac2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d013      	beq.n	8002af4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002acc:	f7fe fc72 	bl	80013b4 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ad4:	f7fe fc6e 	bl	80013b4 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b64      	cmp	r3, #100	; 0x64
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e207      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae6:	4b5b      	ldr	r3, [pc, #364]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0xc0>
 8002af2:	e014      	b.n	8002b1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af4:	f7fe fc5e 	bl	80013b4 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002afc:	f7fe fc5a 	bl	80013b4 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b64      	cmp	r3, #100	; 0x64
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e1f3      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b0e:	4b51      	ldr	r3, [pc, #324]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f0      	bne.n	8002afc <HAL_RCC_OscConfig+0xe8>
 8002b1a:	e000      	b.n	8002b1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d063      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b2a:	4b4a      	ldr	r3, [pc, #296]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 030c 	and.w	r3, r3, #12
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00b      	beq.n	8002b4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b36:	4b47      	ldr	r3, [pc, #284]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d11c      	bne.n	8002b7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b42:	4b44      	ldr	r3, [pc, #272]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d116      	bne.n	8002b7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b4e:	4b41      	ldr	r3, [pc, #260]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d005      	beq.n	8002b66 <HAL_RCC_OscConfig+0x152>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d001      	beq.n	8002b66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e1c7      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b66:	4b3b      	ldr	r3, [pc, #236]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	4937      	ldr	r1, [pc, #220]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b7a:	e03a      	b.n	8002bf2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d020      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b84:	4b34      	ldr	r3, [pc, #208]	; (8002c58 <HAL_RCC_OscConfig+0x244>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8a:	f7fe fc13 	bl	80013b4 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b92:	f7fe fc0f 	bl	80013b4 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e1a8      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba4:	4b2b      	ldr	r3, [pc, #172]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f0      	beq.n	8002b92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb0:	4b28      	ldr	r3, [pc, #160]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4925      	ldr	r1, [pc, #148]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	600b      	str	r3, [r1, #0]
 8002bc4:	e015      	b.n	8002bf2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bc6:	4b24      	ldr	r3, [pc, #144]	; (8002c58 <HAL_RCC_OscConfig+0x244>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bcc:	f7fe fbf2 	bl	80013b4 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bd4:	f7fe fbee 	bl	80013b4 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e187      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be6:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d036      	beq.n	8002c6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d016      	beq.n	8002c34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c06:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <HAL_RCC_OscConfig+0x248>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0c:	f7fe fbd2 	bl	80013b4 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c14:	f7fe fbce 	bl	80013b4 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e167      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c26:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0x200>
 8002c32:	e01b      	b.n	8002c6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c34:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <HAL_RCC_OscConfig+0x248>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3a:	f7fe fbbb 	bl	80013b4 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c40:	e00e      	b.n	8002c60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c42:	f7fe fbb7 	bl	80013b4 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d907      	bls.n	8002c60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e150      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
 8002c54:	40023800 	.word	0x40023800
 8002c58:	42470000 	.word	0x42470000
 8002c5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c60:	4b88      	ldr	r3, [pc, #544]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1ea      	bne.n	8002c42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 8097 	beq.w	8002da8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c7e:	4b81      	ldr	r3, [pc, #516]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10f      	bne.n	8002caa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	4b7d      	ldr	r3, [pc, #500]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	4a7c      	ldr	r2, [pc, #496]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c98:	6413      	str	r3, [r2, #64]	; 0x40
 8002c9a:	4b7a      	ldr	r3, [pc, #488]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002caa:	4b77      	ldr	r3, [pc, #476]	; (8002e88 <HAL_RCC_OscConfig+0x474>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d118      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cb6:	4b74      	ldr	r3, [pc, #464]	; (8002e88 <HAL_RCC_OscConfig+0x474>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a73      	ldr	r2, [pc, #460]	; (8002e88 <HAL_RCC_OscConfig+0x474>)
 8002cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cc2:	f7fe fb77 	bl	80013b4 <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cca:	f7fe fb73 	bl	80013b4 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e10c      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cdc:	4b6a      	ldr	r3, [pc, #424]	; (8002e88 <HAL_RCC_OscConfig+0x474>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0f0      	beq.n	8002cca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d106      	bne.n	8002cfe <HAL_RCC_OscConfig+0x2ea>
 8002cf0:	4b64      	ldr	r3, [pc, #400]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf4:	4a63      	ldr	r2, [pc, #396]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8002cfc:	e01c      	b.n	8002d38 <HAL_RCC_OscConfig+0x324>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	2b05      	cmp	r3, #5
 8002d04:	d10c      	bne.n	8002d20 <HAL_RCC_OscConfig+0x30c>
 8002d06:	4b5f      	ldr	r3, [pc, #380]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0a:	4a5e      	ldr	r2, [pc, #376]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002d0c:	f043 0304 	orr.w	r3, r3, #4
 8002d10:	6713      	str	r3, [r2, #112]	; 0x70
 8002d12:	4b5c      	ldr	r3, [pc, #368]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d16:	4a5b      	ldr	r2, [pc, #364]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d1e:	e00b      	b.n	8002d38 <HAL_RCC_OscConfig+0x324>
 8002d20:	4b58      	ldr	r3, [pc, #352]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	4a57      	ldr	r2, [pc, #348]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002d26:	f023 0301 	bic.w	r3, r3, #1
 8002d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2c:	4b55      	ldr	r3, [pc, #340]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	4a54      	ldr	r2, [pc, #336]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002d32:	f023 0304 	bic.w	r3, r3, #4
 8002d36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d015      	beq.n	8002d6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d40:	f7fe fb38 	bl	80013b4 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d46:	e00a      	b.n	8002d5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d48:	f7fe fb34 	bl	80013b4 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e0cb      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d5e:	4b49      	ldr	r3, [pc, #292]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0ee      	beq.n	8002d48 <HAL_RCC_OscConfig+0x334>
 8002d6a:	e014      	b.n	8002d96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6c:	f7fe fb22 	bl	80013b4 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d72:	e00a      	b.n	8002d8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d74:	f7fe fb1e 	bl	80013b4 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e0b5      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d8a:	4b3e      	ldr	r3, [pc, #248]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1ee      	bne.n	8002d74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d96:	7dfb      	ldrb	r3, [r7, #23]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d105      	bne.n	8002da8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d9c:	4b39      	ldr	r3, [pc, #228]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	4a38      	ldr	r2, [pc, #224]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002da2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002da6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 80a1 	beq.w	8002ef4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002db2:	4b34      	ldr	r3, [pc, #208]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d05c      	beq.n	8002e78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d141      	bne.n	8002e4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc6:	4b31      	ldr	r3, [pc, #196]	; (8002e8c <HAL_RCC_OscConfig+0x478>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dcc:	f7fe faf2 	bl	80013b4 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd4:	f7fe faee 	bl	80013b4 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e087      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de6:	4b27      	ldr	r3, [pc, #156]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f0      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69da      	ldr	r2, [r3, #28]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	019b      	lsls	r3, r3, #6
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	085b      	lsrs	r3, r3, #1
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	041b      	lsls	r3, r3, #16
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e14:	061b      	lsls	r3, r3, #24
 8002e16:	491b      	ldr	r1, [pc, #108]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e1c:	4b1b      	ldr	r3, [pc, #108]	; (8002e8c <HAL_RCC_OscConfig+0x478>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e22:	f7fe fac7 	bl	80013b4 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e2a:	f7fe fac3 	bl	80013b4 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e05c      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3c:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f0      	beq.n	8002e2a <HAL_RCC_OscConfig+0x416>
 8002e48:	e054      	b.n	8002ef4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4a:	4b10      	ldr	r3, [pc, #64]	; (8002e8c <HAL_RCC_OscConfig+0x478>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e50:	f7fe fab0 	bl	80013b4 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e58:	f7fe faac 	bl	80013b4 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e045      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6a:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0x444>
 8002e76:	e03d      	b.n	8002ef4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d107      	bne.n	8002e90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e038      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40007000 	.word	0x40007000
 8002e8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e90:	4b1b      	ldr	r3, [pc, #108]	; (8002f00 <HAL_RCC_OscConfig+0x4ec>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d028      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d121      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d11a      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ec6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d111      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed6:	085b      	lsrs	r3, r3, #1
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d107      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e000      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3718      	adds	r7, #24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40023800 	.word	0x40023800

08002f04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0cc      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f18:	4b68      	ldr	r3, [pc, #416]	; (80030bc <HAL_RCC_ClockConfig+0x1b8>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d90c      	bls.n	8002f40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f26:	4b65      	ldr	r3, [pc, #404]	; (80030bc <HAL_RCC_ClockConfig+0x1b8>)
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2e:	4b63      	ldr	r3, [pc, #396]	; (80030bc <HAL_RCC_ClockConfig+0x1b8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0b8      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d020      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f58:	4b59      	ldr	r3, [pc, #356]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	4a58      	ldr	r2, [pc, #352]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f70:	4b53      	ldr	r3, [pc, #332]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	4a52      	ldr	r2, [pc, #328]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f7c:	4b50      	ldr	r3, [pc, #320]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	494d      	ldr	r1, [pc, #308]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d044      	beq.n	8003024 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d107      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa2:	4b47      	ldr	r3, [pc, #284]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d119      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e07f      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d003      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fbe:	2b03      	cmp	r3, #3
 8002fc0:	d107      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc2:	4b3f      	ldr	r3, [pc, #252]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d109      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e06f      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd2:	4b3b      	ldr	r3, [pc, #236]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e067      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fe2:	4b37      	ldr	r3, [pc, #220]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f023 0203 	bic.w	r2, r3, #3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	4934      	ldr	r1, [pc, #208]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ff4:	f7fe f9de 	bl	80013b4 <HAL_GetTick>
 8002ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffa:	e00a      	b.n	8003012 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ffc:	f7fe f9da 	bl	80013b4 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	f241 3288 	movw	r2, #5000	; 0x1388
 800300a:	4293      	cmp	r3, r2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e04f      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003012:	4b2b      	ldr	r3, [pc, #172]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 020c 	and.w	r2, r3, #12
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	429a      	cmp	r2, r3
 8003022:	d1eb      	bne.n	8002ffc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003024:	4b25      	ldr	r3, [pc, #148]	; (80030bc <HAL_RCC_ClockConfig+0x1b8>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d20c      	bcs.n	800304c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003032:	4b22      	ldr	r3, [pc, #136]	; (80030bc <HAL_RCC_ClockConfig+0x1b8>)
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800303a:	4b20      	ldr	r3, [pc, #128]	; (80030bc <HAL_RCC_ClockConfig+0x1b8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d001      	beq.n	800304c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e032      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	d008      	beq.n	800306a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003058:	4b19      	ldr	r3, [pc, #100]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4916      	ldr	r1, [pc, #88]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003066:	4313      	orrs	r3, r2
 8003068:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b00      	cmp	r3, #0
 8003074:	d009      	beq.n	800308a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003076:	4b12      	ldr	r3, [pc, #72]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	490e      	ldr	r1, [pc, #56]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800308a:	f000 f821 	bl	80030d0 <HAL_RCC_GetSysClockFreq>
 800308e:	4602      	mov	r2, r0
 8003090:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	091b      	lsrs	r3, r3, #4
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	490a      	ldr	r1, [pc, #40]	; (80030c4 <HAL_RCC_ClockConfig+0x1c0>)
 800309c:	5ccb      	ldrb	r3, [r1, r3]
 800309e:	fa22 f303 	lsr.w	r3, r2, r3
 80030a2:	4a09      	ldr	r2, [pc, #36]	; (80030c8 <HAL_RCC_ClockConfig+0x1c4>)
 80030a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030a6:	4b09      	ldr	r3, [pc, #36]	; (80030cc <HAL_RCC_ClockConfig+0x1c8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fe f93e 	bl	800132c <HAL_InitTick>

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40023c00 	.word	0x40023c00
 80030c0:	40023800 	.word	0x40023800
 80030c4:	08004558 	.word	0x08004558
 80030c8:	20000000 	.word	0x20000000
 80030cc:	20000004 	.word	0x20000004

080030d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030d4:	b090      	sub	sp, #64	; 0x40
 80030d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	637b      	str	r3, [r7, #52]	; 0x34
 80030dc:	2300      	movs	r3, #0
 80030de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030e0:	2300      	movs	r3, #0
 80030e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030e8:	4b59      	ldr	r3, [pc, #356]	; (8003250 <HAL_RCC_GetSysClockFreq+0x180>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 030c 	and.w	r3, r3, #12
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d00d      	beq.n	8003110 <HAL_RCC_GetSysClockFreq+0x40>
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	f200 80a1 	bhi.w	800323c <HAL_RCC_GetSysClockFreq+0x16c>
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <HAL_RCC_GetSysClockFreq+0x34>
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d003      	beq.n	800310a <HAL_RCC_GetSysClockFreq+0x3a>
 8003102:	e09b      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003104:	4b53      	ldr	r3, [pc, #332]	; (8003254 <HAL_RCC_GetSysClockFreq+0x184>)
 8003106:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003108:	e09b      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800310a:	4b53      	ldr	r3, [pc, #332]	; (8003258 <HAL_RCC_GetSysClockFreq+0x188>)
 800310c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800310e:	e098      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003110:	4b4f      	ldr	r3, [pc, #316]	; (8003250 <HAL_RCC_GetSysClockFreq+0x180>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003118:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800311a:	4b4d      	ldr	r3, [pc, #308]	; (8003250 <HAL_RCC_GetSysClockFreq+0x180>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d028      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003126:	4b4a      	ldr	r3, [pc, #296]	; (8003250 <HAL_RCC_GetSysClockFreq+0x180>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	099b      	lsrs	r3, r3, #6
 800312c:	2200      	movs	r2, #0
 800312e:	623b      	str	r3, [r7, #32]
 8003130:	627a      	str	r2, [r7, #36]	; 0x24
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003138:	2100      	movs	r1, #0
 800313a:	4b47      	ldr	r3, [pc, #284]	; (8003258 <HAL_RCC_GetSysClockFreq+0x188>)
 800313c:	fb03 f201 	mul.w	r2, r3, r1
 8003140:	2300      	movs	r3, #0
 8003142:	fb00 f303 	mul.w	r3, r0, r3
 8003146:	4413      	add	r3, r2
 8003148:	4a43      	ldr	r2, [pc, #268]	; (8003258 <HAL_RCC_GetSysClockFreq+0x188>)
 800314a:	fba0 1202 	umull	r1, r2, r0, r2
 800314e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003150:	460a      	mov	r2, r1
 8003152:	62ba      	str	r2, [r7, #40]	; 0x28
 8003154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003156:	4413      	add	r3, r2
 8003158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800315a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800315c:	2200      	movs	r2, #0
 800315e:	61bb      	str	r3, [r7, #24]
 8003160:	61fa      	str	r2, [r7, #28]
 8003162:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003166:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800316a:	f7fd fc73 	bl	8000a54 <__aeabi_uldivmod>
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4613      	mov	r3, r2
 8003174:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003176:	e053      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003178:	4b35      	ldr	r3, [pc, #212]	; (8003250 <HAL_RCC_GetSysClockFreq+0x180>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	099b      	lsrs	r3, r3, #6
 800317e:	2200      	movs	r2, #0
 8003180:	613b      	str	r3, [r7, #16]
 8003182:	617a      	str	r2, [r7, #20]
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800318a:	f04f 0b00 	mov.w	fp, #0
 800318e:	4652      	mov	r2, sl
 8003190:	465b      	mov	r3, fp
 8003192:	f04f 0000 	mov.w	r0, #0
 8003196:	f04f 0100 	mov.w	r1, #0
 800319a:	0159      	lsls	r1, r3, #5
 800319c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031a0:	0150      	lsls	r0, r2, #5
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	ebb2 080a 	subs.w	r8, r2, sl
 80031aa:	eb63 090b 	sbc.w	r9, r3, fp
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	f04f 0300 	mov.w	r3, #0
 80031b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80031ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80031be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80031c2:	ebb2 0408 	subs.w	r4, r2, r8
 80031c6:	eb63 0509 	sbc.w	r5, r3, r9
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	00eb      	lsls	r3, r5, #3
 80031d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031d8:	00e2      	lsls	r2, r4, #3
 80031da:	4614      	mov	r4, r2
 80031dc:	461d      	mov	r5, r3
 80031de:	eb14 030a 	adds.w	r3, r4, sl
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	eb45 030b 	adc.w	r3, r5, fp
 80031e8:	607b      	str	r3, [r7, #4]
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031f6:	4629      	mov	r1, r5
 80031f8:	028b      	lsls	r3, r1, #10
 80031fa:	4621      	mov	r1, r4
 80031fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003200:	4621      	mov	r1, r4
 8003202:	028a      	lsls	r2, r1, #10
 8003204:	4610      	mov	r0, r2
 8003206:	4619      	mov	r1, r3
 8003208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320a:	2200      	movs	r2, #0
 800320c:	60bb      	str	r3, [r7, #8]
 800320e:	60fa      	str	r2, [r7, #12]
 8003210:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003214:	f7fd fc1e 	bl	8000a54 <__aeabi_uldivmod>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	4613      	mov	r3, r2
 800321e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <HAL_RCC_GetSysClockFreq+0x180>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	0c1b      	lsrs	r3, r3, #16
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	3301      	adds	r3, #1
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003230:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003234:	fbb2 f3f3 	udiv	r3, r2, r3
 8003238:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800323a:	e002      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <HAL_RCC_GetSysClockFreq+0x184>)
 800323e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003244:	4618      	mov	r0, r3
 8003246:	3740      	adds	r7, #64	; 0x40
 8003248:	46bd      	mov	sp, r7
 800324a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800324e:	bf00      	nop
 8003250:	40023800 	.word	0x40023800
 8003254:	00f42400 	.word	0x00f42400
 8003258:	017d7840 	.word	0x017d7840

0800325c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003260:	4b03      	ldr	r3, [pc, #12]	; (8003270 <HAL_RCC_GetHCLKFreq+0x14>)
 8003262:	681b      	ldr	r3, [r3, #0]
}
 8003264:	4618      	mov	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	20000000 	.word	0x20000000

08003274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003278:	f7ff fff0 	bl	800325c <HAL_RCC_GetHCLKFreq>
 800327c:	4602      	mov	r2, r0
 800327e:	4b05      	ldr	r3, [pc, #20]	; (8003294 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	0a9b      	lsrs	r3, r3, #10
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	4903      	ldr	r1, [pc, #12]	; (8003298 <HAL_RCC_GetPCLK1Freq+0x24>)
 800328a:	5ccb      	ldrb	r3, [r1, r3]
 800328c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003290:	4618      	mov	r0, r3
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40023800 	.word	0x40023800
 8003298:	08004568 	.word	0x08004568

0800329c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032a0:	f7ff ffdc 	bl	800325c <HAL_RCC_GetHCLKFreq>
 80032a4:	4602      	mov	r2, r0
 80032a6:	4b05      	ldr	r3, [pc, #20]	; (80032bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	0b5b      	lsrs	r3, r3, #13
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	4903      	ldr	r1, [pc, #12]	; (80032c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032b2:	5ccb      	ldrb	r3, [r1, r3]
 80032b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40023800 	.word	0x40023800
 80032c0:	08004568 	.word	0x08004568

080032c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e03f      	b.n	8003356 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d106      	bne.n	80032f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7fd ff3c 	bl	8001168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2224      	movs	r2, #36	; 0x24
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003306:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 fc7b 	bl	8003c04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800331c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695a      	ldr	r2, [r3, #20]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800332c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800333c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b0ba      	sub	sp, #232	; 0xe8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003386:	2300      	movs	r3, #0
 8003388:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800338c:	2300      	movs	r3, #0
 800338e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800339e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10f      	bne.n	80033c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033aa:	f003 0320 	and.w	r3, r3, #32
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d009      	beq.n	80033c6 <HAL_UART_IRQHandler+0x66>
 80033b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033b6:	f003 0320 	and.w	r3, r3, #32
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fb65 	bl	8003a8e <UART_Receive_IT>
      return;
 80033c4:	e256      	b.n	8003874 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80033c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 80de 	beq.w	800358c <HAL_UART_IRQHandler+0x22c>
 80033d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d106      	bne.n	80033ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 80d1 	beq.w	800358c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00b      	beq.n	800340e <HAL_UART_IRQHandler+0xae>
 80033f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d005      	beq.n	800340e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f043 0201 	orr.w	r2, r3, #1
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800340e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003412:	f003 0304 	and.w	r3, r3, #4
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00b      	beq.n	8003432 <HAL_UART_IRQHandler+0xd2>
 800341a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d005      	beq.n	8003432 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f043 0202 	orr.w	r2, r3, #2
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00b      	beq.n	8003456 <HAL_UART_IRQHandler+0xf6>
 800343e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d005      	beq.n	8003456 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f043 0204 	orr.w	r2, r3, #4
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b00      	cmp	r3, #0
 8003460:	d011      	beq.n	8003486 <HAL_UART_IRQHandler+0x126>
 8003462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003466:	f003 0320 	and.w	r3, r3, #32
 800346a:	2b00      	cmp	r3, #0
 800346c:	d105      	bne.n	800347a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800346e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d005      	beq.n	8003486 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	f043 0208 	orr.w	r2, r3, #8
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 81ed 	beq.w	800386a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003494:	f003 0320 	and.w	r3, r3, #32
 8003498:	2b00      	cmp	r3, #0
 800349a:	d008      	beq.n	80034ae <HAL_UART_IRQHandler+0x14e>
 800349c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034a0:	f003 0320 	and.w	r3, r3, #32
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 faf0 	bl	8003a8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b8:	2b40      	cmp	r3, #64	; 0x40
 80034ba:	bf0c      	ite	eq
 80034bc:	2301      	moveq	r3, #1
 80034be:	2300      	movne	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d103      	bne.n	80034da <HAL_UART_IRQHandler+0x17a>
 80034d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d04f      	beq.n	800357a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f9f8 	bl	80038d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ea:	2b40      	cmp	r3, #64	; 0x40
 80034ec:	d141      	bne.n	8003572 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	3314      	adds	r3, #20
 80034f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034fc:	e853 3f00 	ldrex	r3, [r3]
 8003500:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003504:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003508:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800350c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3314      	adds	r3, #20
 8003516:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800351a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800351e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003522:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003526:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800352a:	e841 2300 	strex	r3, r2, [r1]
 800352e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003532:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1d9      	bne.n	80034ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353e:	2b00      	cmp	r3, #0
 8003540:	d013      	beq.n	800356a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003546:	4a7d      	ldr	r2, [pc, #500]	; (800373c <HAL_UART_IRQHandler+0x3dc>)
 8003548:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354e:	4618      	mov	r0, r3
 8003550:	f7fe f8e1 	bl	8001716 <HAL_DMA_Abort_IT>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d016      	beq.n	8003588 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003564:	4610      	mov	r0, r2
 8003566:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003568:	e00e      	b.n	8003588 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f99a 	bl	80038a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003570:	e00a      	b.n	8003588 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f996 	bl	80038a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003578:	e006      	b.n	8003588 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f992 	bl	80038a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003586:	e170      	b.n	800386a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003588:	bf00      	nop
    return;
 800358a:	e16e      	b.n	800386a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003590:	2b01      	cmp	r3, #1
 8003592:	f040 814a 	bne.w	800382a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800359a:	f003 0310 	and.w	r3, r3, #16
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 8143 	beq.w	800382a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80035a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035a8:	f003 0310 	and.w	r3, r3, #16
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 813c 	beq.w	800382a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035b2:	2300      	movs	r3, #0
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	60bb      	str	r3, [r7, #8]
 80035c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d2:	2b40      	cmp	r3, #64	; 0x40
 80035d4:	f040 80b4 	bne.w	8003740 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 8140 	beq.w	800386e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035f6:	429a      	cmp	r2, r3
 80035f8:	f080 8139 	bcs.w	800386e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003602:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800360e:	f000 8088 	beq.w	8003722 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	330c      	adds	r3, #12
 8003618:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003620:	e853 3f00 	ldrex	r3, [r3]
 8003624:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003628:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800362c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003630:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	330c      	adds	r3, #12
 800363a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800363e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003642:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003646:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800364a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800364e:	e841 2300 	strex	r3, r2, [r1]
 8003652:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003656:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1d9      	bne.n	8003612 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	3314      	adds	r3, #20
 8003664:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003666:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003668:	e853 3f00 	ldrex	r3, [r3]
 800366c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800366e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003670:	f023 0301 	bic.w	r3, r3, #1
 8003674:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3314      	adds	r3, #20
 800367e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003682:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003686:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003688:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800368a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800368e:	e841 2300 	strex	r3, r2, [r1]
 8003692:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1e1      	bne.n	800365e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	3314      	adds	r3, #20
 80036a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036a4:	e853 3f00 	ldrex	r3, [r3]
 80036a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80036aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	3314      	adds	r3, #20
 80036ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80036be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80036c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80036c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036c6:	e841 2300 	strex	r3, r2, [r1]
 80036ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80036cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1e3      	bne.n	800369a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	330c      	adds	r3, #12
 80036e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ea:	e853 3f00 	ldrex	r3, [r3]
 80036ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80036f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036f2:	f023 0310 	bic.w	r3, r3, #16
 80036f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	330c      	adds	r3, #12
 8003700:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003704:	65ba      	str	r2, [r7, #88]	; 0x58
 8003706:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003708:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800370a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800370c:	e841 2300 	strex	r3, r2, [r1]
 8003710:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1e3      	bne.n	80036e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371c:	4618      	mov	r0, r3
 800371e:	f7fd ff8a 	bl	8001636 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800372a:	b29b      	uxth	r3, r3
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	b29b      	uxth	r3, r3
 8003730:	4619      	mov	r1, r3
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f8c0 	bl	80038b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003738:	e099      	b.n	800386e <HAL_UART_IRQHandler+0x50e>
 800373a:	bf00      	nop
 800373c:	08003997 	.word	0x08003997
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003748:	b29b      	uxth	r3, r3
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 808b 	beq.w	8003872 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800375c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 8086 	beq.w	8003872 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	330c      	adds	r3, #12
 800376c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003770:	e853 3f00 	ldrex	r3, [r3]
 8003774:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003778:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800377c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	330c      	adds	r3, #12
 8003786:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800378a:	647a      	str	r2, [r7, #68]	; 0x44
 800378c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003790:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003792:	e841 2300 	strex	r3, r2, [r1]
 8003796:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1e3      	bne.n	8003766 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	3314      	adds	r3, #20
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	e853 3f00 	ldrex	r3, [r3]
 80037ac:	623b      	str	r3, [r7, #32]
   return(result);
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	f023 0301 	bic.w	r3, r3, #1
 80037b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	3314      	adds	r3, #20
 80037be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80037c2:	633a      	str	r2, [r7, #48]	; 0x30
 80037c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ca:	e841 2300 	strex	r3, r2, [r1]
 80037ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1e3      	bne.n	800379e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	330c      	adds	r3, #12
 80037ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	e853 3f00 	ldrex	r3, [r3]
 80037f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 0310 	bic.w	r3, r3, #16
 80037fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	330c      	adds	r3, #12
 8003804:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003808:	61fa      	str	r2, [r7, #28]
 800380a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380c:	69b9      	ldr	r1, [r7, #24]
 800380e:	69fa      	ldr	r2, [r7, #28]
 8003810:	e841 2300 	strex	r3, r2, [r1]
 8003814:	617b      	str	r3, [r7, #20]
   return(result);
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1e3      	bne.n	80037e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800381c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003820:	4619      	mov	r1, r3
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f848 	bl	80038b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003828:	e023      	b.n	8003872 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800382a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800382e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003832:	2b00      	cmp	r3, #0
 8003834:	d009      	beq.n	800384a <HAL_UART_IRQHandler+0x4ea>
 8003836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800383a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f8bb 	bl	80039be <UART_Transmit_IT>
    return;
 8003848:	e014      	b.n	8003874 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800384a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800384e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00e      	beq.n	8003874 <HAL_UART_IRQHandler+0x514>
 8003856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800385a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385e:	2b00      	cmp	r3, #0
 8003860:	d008      	beq.n	8003874 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f8fb 	bl	8003a5e <UART_EndTransmit_IT>
    return;
 8003868:	e004      	b.n	8003874 <HAL_UART_IRQHandler+0x514>
    return;
 800386a:	bf00      	nop
 800386c:	e002      	b.n	8003874 <HAL_UART_IRQHandler+0x514>
      return;
 800386e:	bf00      	nop
 8003870:	e000      	b.n	8003874 <HAL_UART_IRQHandler+0x514>
      return;
 8003872:	bf00      	nop
  }
}
 8003874:	37e8      	adds	r7, #232	; 0xe8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop

0800387c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b095      	sub	sp, #84	; 0x54
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	330c      	adds	r3, #12
 80038de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e2:	e853 3f00 	ldrex	r3, [r3]
 80038e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	330c      	adds	r3, #12
 80038f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038f8:	643a      	str	r2, [r7, #64]	; 0x40
 80038fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003900:	e841 2300 	strex	r3, r2, [r1]
 8003904:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1e5      	bne.n	80038d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	3314      	adds	r3, #20
 8003912:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	e853 3f00 	ldrex	r3, [r3]
 800391a:	61fb      	str	r3, [r7, #28]
   return(result);
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f023 0301 	bic.w	r3, r3, #1
 8003922:	64bb      	str	r3, [r7, #72]	; 0x48
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3314      	adds	r3, #20
 800392a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800392c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800392e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003930:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003934:	e841 2300 	strex	r3, r2, [r1]
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1e5      	bne.n	800390c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	2b01      	cmp	r3, #1
 8003946:	d119      	bne.n	800397c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	330c      	adds	r3, #12
 800394e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	e853 3f00 	ldrex	r3, [r3]
 8003956:	60bb      	str	r3, [r7, #8]
   return(result);
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f023 0310 	bic.w	r3, r3, #16
 800395e:	647b      	str	r3, [r7, #68]	; 0x44
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	330c      	adds	r3, #12
 8003966:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003968:	61ba      	str	r2, [r7, #24]
 800396a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396c:	6979      	ldr	r1, [r7, #20]
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	e841 2300 	strex	r3, r2, [r1]
 8003974:	613b      	str	r3, [r7, #16]
   return(result);
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1e5      	bne.n	8003948 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	631a      	str	r2, [r3, #48]	; 0x30
}
 800398a:	bf00      	nop
 800398c:	3754      	adds	r7, #84	; 0x54
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b084      	sub	sp, #16
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f7ff ff77 	bl	80038a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039b6:	bf00      	nop
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039be:	b480      	push	{r7}
 80039c0:	b085      	sub	sp, #20
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b21      	cmp	r3, #33	; 0x21
 80039d0:	d13e      	bne.n	8003a50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039da:	d114      	bne.n	8003a06 <UART_Transmit_IT+0x48>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d110      	bne.n	8003a06 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	1c9a      	adds	r2, r3, #2
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	621a      	str	r2, [r3, #32]
 8003a04:	e008      	b.n	8003a18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	1c59      	adds	r1, r3, #1
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6211      	str	r1, [r2, #32]
 8003a10:	781a      	ldrb	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	4619      	mov	r1, r3
 8003a26:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10f      	bne.n	8003a4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	e000      	b.n	8003a52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a50:	2302      	movs	r3, #2
  }
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b082      	sub	sp, #8
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7ff fefc 	bl	800387c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b08c      	sub	sp, #48	; 0x30
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b22      	cmp	r3, #34	; 0x22
 8003aa0:	f040 80ab 	bne.w	8003bfa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aac:	d117      	bne.n	8003ade <UART_Receive_IT+0x50>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d113      	bne.n	8003ade <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad6:	1c9a      	adds	r2, r3, #2
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	629a      	str	r2, [r3, #40]	; 0x28
 8003adc:	e026      	b.n	8003b2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af0:	d007      	beq.n	8003b02 <UART_Receive_IT+0x74>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10a      	bne.n	8003b10 <UART_Receive_IT+0x82>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d106      	bne.n	8003b10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0c:	701a      	strb	r2, [r3, #0]
 8003b0e:	e008      	b.n	8003b22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d15a      	bne.n	8003bf6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0220 	bic.w	r2, r2, #32
 8003b4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695a      	ldr	r2, [r3, #20]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0201 	bic.w	r2, r2, #1
 8003b6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d135      	bne.n	8003bec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	330c      	adds	r3, #12
 8003b8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	e853 3f00 	ldrex	r3, [r3]
 8003b94:	613b      	str	r3, [r7, #16]
   return(result);
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f023 0310 	bic.w	r3, r3, #16
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	330c      	adds	r3, #12
 8003ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba6:	623a      	str	r2, [r7, #32]
 8003ba8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003baa:	69f9      	ldr	r1, [r7, #28]
 8003bac:	6a3a      	ldr	r2, [r7, #32]
 8003bae:	e841 2300 	strex	r3, r2, [r1]
 8003bb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1e5      	bne.n	8003b86 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0310 	and.w	r3, r3, #16
 8003bc4:	2b10      	cmp	r3, #16
 8003bc6:	d10a      	bne.n	8003bde <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003be2:	4619      	mov	r1, r3
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff fe67 	bl	80038b8 <HAL_UARTEx_RxEventCallback>
 8003bea:	e002      	b.n	8003bf2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff fe4f 	bl	8003890 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	e002      	b.n	8003bfc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	e000      	b.n	8003bfc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003bfa:	2302      	movs	r3, #2
  }
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3730      	adds	r7, #48	; 0x30
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c08:	b0c0      	sub	sp, #256	; 0x100
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c20:	68d9      	ldr	r1, [r3, #12]
 8003c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	ea40 0301 	orr.w	r3, r0, r1
 8003c2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	431a      	orrs	r2, r3
 8003c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c5c:	f021 010c 	bic.w	r1, r1, #12
 8003c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c6a:	430b      	orrs	r3, r1
 8003c6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c7e:	6999      	ldr	r1, [r3, #24]
 8003c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	ea40 0301 	orr.w	r3, r0, r1
 8003c8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	4b8f      	ldr	r3, [pc, #572]	; (8003ed0 <UART_SetConfig+0x2cc>)
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d005      	beq.n	8003ca4 <UART_SetConfig+0xa0>
 8003c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	4b8d      	ldr	r3, [pc, #564]	; (8003ed4 <UART_SetConfig+0x2d0>)
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d104      	bne.n	8003cae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ca4:	f7ff fafa 	bl	800329c <HAL_RCC_GetPCLK2Freq>
 8003ca8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003cac:	e003      	b.n	8003cb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cae:	f7ff fae1 	bl	8003274 <HAL_RCC_GetPCLK1Freq>
 8003cb2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc0:	f040 810c 	bne.w	8003edc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003cce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003cd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003cd6:	4622      	mov	r2, r4
 8003cd8:	462b      	mov	r3, r5
 8003cda:	1891      	adds	r1, r2, r2
 8003cdc:	65b9      	str	r1, [r7, #88]	; 0x58
 8003cde:	415b      	adcs	r3, r3
 8003ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ce2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ce6:	4621      	mov	r1, r4
 8003ce8:	eb12 0801 	adds.w	r8, r2, r1
 8003cec:	4629      	mov	r1, r5
 8003cee:	eb43 0901 	adc.w	r9, r3, r1
 8003cf2:	f04f 0200 	mov.w	r2, #0
 8003cf6:	f04f 0300 	mov.w	r3, #0
 8003cfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d06:	4690      	mov	r8, r2
 8003d08:	4699      	mov	r9, r3
 8003d0a:	4623      	mov	r3, r4
 8003d0c:	eb18 0303 	adds.w	r3, r8, r3
 8003d10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d14:	462b      	mov	r3, r5
 8003d16:	eb49 0303 	adc.w	r3, r9, r3
 8003d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d2a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d32:	460b      	mov	r3, r1
 8003d34:	18db      	adds	r3, r3, r3
 8003d36:	653b      	str	r3, [r7, #80]	; 0x50
 8003d38:	4613      	mov	r3, r2
 8003d3a:	eb42 0303 	adc.w	r3, r2, r3
 8003d3e:	657b      	str	r3, [r7, #84]	; 0x54
 8003d40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d48:	f7fc fe84 	bl	8000a54 <__aeabi_uldivmod>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4b61      	ldr	r3, [pc, #388]	; (8003ed8 <UART_SetConfig+0x2d4>)
 8003d52:	fba3 2302 	umull	r2, r3, r3, r2
 8003d56:	095b      	lsrs	r3, r3, #5
 8003d58:	011c      	lsls	r4, r3, #4
 8003d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d64:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d6c:	4642      	mov	r2, r8
 8003d6e:	464b      	mov	r3, r9
 8003d70:	1891      	adds	r1, r2, r2
 8003d72:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d74:	415b      	adcs	r3, r3
 8003d76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d7c:	4641      	mov	r1, r8
 8003d7e:	eb12 0a01 	adds.w	sl, r2, r1
 8003d82:	4649      	mov	r1, r9
 8003d84:	eb43 0b01 	adc.w	fp, r3, r1
 8003d88:	f04f 0200 	mov.w	r2, #0
 8003d8c:	f04f 0300 	mov.w	r3, #0
 8003d90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d9c:	4692      	mov	sl, r2
 8003d9e:	469b      	mov	fp, r3
 8003da0:	4643      	mov	r3, r8
 8003da2:	eb1a 0303 	adds.w	r3, sl, r3
 8003da6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003daa:	464b      	mov	r3, r9
 8003dac:	eb4b 0303 	adc.w	r3, fp, r3
 8003db0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dc0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003dc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	18db      	adds	r3, r3, r3
 8003dcc:	643b      	str	r3, [r7, #64]	; 0x40
 8003dce:	4613      	mov	r3, r2
 8003dd0:	eb42 0303 	adc.w	r3, r2, r3
 8003dd4:	647b      	str	r3, [r7, #68]	; 0x44
 8003dd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003dda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003dde:	f7fc fe39 	bl	8000a54 <__aeabi_uldivmod>
 8003de2:	4602      	mov	r2, r0
 8003de4:	460b      	mov	r3, r1
 8003de6:	4611      	mov	r1, r2
 8003de8:	4b3b      	ldr	r3, [pc, #236]	; (8003ed8 <UART_SetConfig+0x2d4>)
 8003dea:	fba3 2301 	umull	r2, r3, r3, r1
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	2264      	movs	r2, #100	; 0x64
 8003df2:	fb02 f303 	mul.w	r3, r2, r3
 8003df6:	1acb      	subs	r3, r1, r3
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003dfe:	4b36      	ldr	r3, [pc, #216]	; (8003ed8 <UART_SetConfig+0x2d4>)
 8003e00:	fba3 2302 	umull	r2, r3, r3, r2
 8003e04:	095b      	lsrs	r3, r3, #5
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e0c:	441c      	add	r4, r3
 8003e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e12:	2200      	movs	r2, #0
 8003e14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e18:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003e20:	4642      	mov	r2, r8
 8003e22:	464b      	mov	r3, r9
 8003e24:	1891      	adds	r1, r2, r2
 8003e26:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e28:	415b      	adcs	r3, r3
 8003e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e30:	4641      	mov	r1, r8
 8003e32:	1851      	adds	r1, r2, r1
 8003e34:	6339      	str	r1, [r7, #48]	; 0x30
 8003e36:	4649      	mov	r1, r9
 8003e38:	414b      	adcs	r3, r1
 8003e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	f04f 0300 	mov.w	r3, #0
 8003e44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e48:	4659      	mov	r1, fp
 8003e4a:	00cb      	lsls	r3, r1, #3
 8003e4c:	4651      	mov	r1, sl
 8003e4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e52:	4651      	mov	r1, sl
 8003e54:	00ca      	lsls	r2, r1, #3
 8003e56:	4610      	mov	r0, r2
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	4642      	mov	r2, r8
 8003e5e:	189b      	adds	r3, r3, r2
 8003e60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e64:	464b      	mov	r3, r9
 8003e66:	460a      	mov	r2, r1
 8003e68:	eb42 0303 	adc.w	r3, r2, r3
 8003e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e7c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e84:	460b      	mov	r3, r1
 8003e86:	18db      	adds	r3, r3, r3
 8003e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	eb42 0303 	adc.w	r3, r2, r3
 8003e90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e9a:	f7fc fddb 	bl	8000a54 <__aeabi_uldivmod>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4b0d      	ldr	r3, [pc, #52]	; (8003ed8 <UART_SetConfig+0x2d4>)
 8003ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ea8:	095b      	lsrs	r3, r3, #5
 8003eaa:	2164      	movs	r1, #100	; 0x64
 8003eac:	fb01 f303 	mul.w	r3, r1, r3
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	3332      	adds	r3, #50	; 0x32
 8003eb6:	4a08      	ldr	r2, [pc, #32]	; (8003ed8 <UART_SetConfig+0x2d4>)
 8003eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebc:	095b      	lsrs	r3, r3, #5
 8003ebe:	f003 0207 	and.w	r2, r3, #7
 8003ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4422      	add	r2, r4
 8003eca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ecc:	e105      	b.n	80040da <UART_SetConfig+0x4d6>
 8003ece:	bf00      	nop
 8003ed0:	40011000 	.word	0x40011000
 8003ed4:	40011400 	.word	0x40011400
 8003ed8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ee6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003eea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003eee:	4642      	mov	r2, r8
 8003ef0:	464b      	mov	r3, r9
 8003ef2:	1891      	adds	r1, r2, r2
 8003ef4:	6239      	str	r1, [r7, #32]
 8003ef6:	415b      	adcs	r3, r3
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8003efa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003efe:	4641      	mov	r1, r8
 8003f00:	1854      	adds	r4, r2, r1
 8003f02:	4649      	mov	r1, r9
 8003f04:	eb43 0501 	adc.w	r5, r3, r1
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	00eb      	lsls	r3, r5, #3
 8003f12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f16:	00e2      	lsls	r2, r4, #3
 8003f18:	4614      	mov	r4, r2
 8003f1a:	461d      	mov	r5, r3
 8003f1c:	4643      	mov	r3, r8
 8003f1e:	18e3      	adds	r3, r4, r3
 8003f20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f24:	464b      	mov	r3, r9
 8003f26:	eb45 0303 	adc.w	r3, r5, r3
 8003f2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f4a:	4629      	mov	r1, r5
 8003f4c:	008b      	lsls	r3, r1, #2
 8003f4e:	4621      	mov	r1, r4
 8003f50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f54:	4621      	mov	r1, r4
 8003f56:	008a      	lsls	r2, r1, #2
 8003f58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f5c:	f7fc fd7a 	bl	8000a54 <__aeabi_uldivmod>
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	4b60      	ldr	r3, [pc, #384]	; (80040e8 <UART_SetConfig+0x4e4>)
 8003f66:	fba3 2302 	umull	r2, r3, r3, r2
 8003f6a:	095b      	lsrs	r3, r3, #5
 8003f6c:	011c      	lsls	r4, r3, #4
 8003f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f72:	2200      	movs	r2, #0
 8003f74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f78:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f80:	4642      	mov	r2, r8
 8003f82:	464b      	mov	r3, r9
 8003f84:	1891      	adds	r1, r2, r2
 8003f86:	61b9      	str	r1, [r7, #24]
 8003f88:	415b      	adcs	r3, r3
 8003f8a:	61fb      	str	r3, [r7, #28]
 8003f8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f90:	4641      	mov	r1, r8
 8003f92:	1851      	adds	r1, r2, r1
 8003f94:	6139      	str	r1, [r7, #16]
 8003f96:	4649      	mov	r1, r9
 8003f98:	414b      	adcs	r3, r1
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fa8:	4659      	mov	r1, fp
 8003faa:	00cb      	lsls	r3, r1, #3
 8003fac:	4651      	mov	r1, sl
 8003fae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fb2:	4651      	mov	r1, sl
 8003fb4:	00ca      	lsls	r2, r1, #3
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4603      	mov	r3, r0
 8003fbc:	4642      	mov	r2, r8
 8003fbe:	189b      	adds	r3, r3, r2
 8003fc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fc4:	464b      	mov	r3, r9
 8003fc6:	460a      	mov	r2, r1
 8003fc8:	eb42 0303 	adc.w	r3, r2, r3
 8003fcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fda:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	f04f 0300 	mov.w	r3, #0
 8003fe4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003fe8:	4649      	mov	r1, r9
 8003fea:	008b      	lsls	r3, r1, #2
 8003fec:	4641      	mov	r1, r8
 8003fee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ff2:	4641      	mov	r1, r8
 8003ff4:	008a      	lsls	r2, r1, #2
 8003ff6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ffa:	f7fc fd2b 	bl	8000a54 <__aeabi_uldivmod>
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	4b39      	ldr	r3, [pc, #228]	; (80040e8 <UART_SetConfig+0x4e4>)
 8004004:	fba3 1302 	umull	r1, r3, r3, r2
 8004008:	095b      	lsrs	r3, r3, #5
 800400a:	2164      	movs	r1, #100	; 0x64
 800400c:	fb01 f303 	mul.w	r3, r1, r3
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	3332      	adds	r3, #50	; 0x32
 8004016:	4a34      	ldr	r2, [pc, #208]	; (80040e8 <UART_SetConfig+0x4e4>)
 8004018:	fba2 2303 	umull	r2, r3, r2, r3
 800401c:	095b      	lsrs	r3, r3, #5
 800401e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004022:	441c      	add	r4, r3
 8004024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004028:	2200      	movs	r2, #0
 800402a:	673b      	str	r3, [r7, #112]	; 0x70
 800402c:	677a      	str	r2, [r7, #116]	; 0x74
 800402e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004032:	4642      	mov	r2, r8
 8004034:	464b      	mov	r3, r9
 8004036:	1891      	adds	r1, r2, r2
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	415b      	adcs	r3, r3
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004042:	4641      	mov	r1, r8
 8004044:	1851      	adds	r1, r2, r1
 8004046:	6039      	str	r1, [r7, #0]
 8004048:	4649      	mov	r1, r9
 800404a:	414b      	adcs	r3, r1
 800404c:	607b      	str	r3, [r7, #4]
 800404e:	f04f 0200 	mov.w	r2, #0
 8004052:	f04f 0300 	mov.w	r3, #0
 8004056:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800405a:	4659      	mov	r1, fp
 800405c:	00cb      	lsls	r3, r1, #3
 800405e:	4651      	mov	r1, sl
 8004060:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004064:	4651      	mov	r1, sl
 8004066:	00ca      	lsls	r2, r1, #3
 8004068:	4610      	mov	r0, r2
 800406a:	4619      	mov	r1, r3
 800406c:	4603      	mov	r3, r0
 800406e:	4642      	mov	r2, r8
 8004070:	189b      	adds	r3, r3, r2
 8004072:	66bb      	str	r3, [r7, #104]	; 0x68
 8004074:	464b      	mov	r3, r9
 8004076:	460a      	mov	r2, r1
 8004078:	eb42 0303 	adc.w	r3, r2, r3
 800407c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800407e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	663b      	str	r3, [r7, #96]	; 0x60
 8004088:	667a      	str	r2, [r7, #100]	; 0x64
 800408a:	f04f 0200 	mov.w	r2, #0
 800408e:	f04f 0300 	mov.w	r3, #0
 8004092:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004096:	4649      	mov	r1, r9
 8004098:	008b      	lsls	r3, r1, #2
 800409a:	4641      	mov	r1, r8
 800409c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040a0:	4641      	mov	r1, r8
 80040a2:	008a      	lsls	r2, r1, #2
 80040a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80040a8:	f7fc fcd4 	bl	8000a54 <__aeabi_uldivmod>
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	4b0d      	ldr	r3, [pc, #52]	; (80040e8 <UART_SetConfig+0x4e4>)
 80040b2:	fba3 1302 	umull	r1, r3, r3, r2
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	2164      	movs	r1, #100	; 0x64
 80040ba:	fb01 f303 	mul.w	r3, r1, r3
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	011b      	lsls	r3, r3, #4
 80040c2:	3332      	adds	r3, #50	; 0x32
 80040c4:	4a08      	ldr	r2, [pc, #32]	; (80040e8 <UART_SetConfig+0x4e4>)
 80040c6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	f003 020f 	and.w	r2, r3, #15
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4422      	add	r2, r4
 80040d8:	609a      	str	r2, [r3, #8]
}
 80040da:	bf00      	nop
 80040dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80040e0:	46bd      	mov	sp, r7
 80040e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040e6:	bf00      	nop
 80040e8:	51eb851f 	.word	0x51eb851f

080040ec <ADXL345_Init>:
int buffer_CounterY = 0;
int buffer_CounterZ = 0;


void ADXL345_Init()  // Değer okumak için gerekli ayarlar yapılıyor ve taskta verilen gerekliliklerin ayarlamaları yapılıyor.
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af04      	add	r7, sp, #16
     uint8_t data;
     data = 0xB;  // 1Hz olarak ayarlıyoruz bir ve ikinci bitlere bir yazıyoruz ayrıca measure aktif hala getiriyoruz.
 80040f2:	230b      	movs	r3, #11
 80040f4:	71fb      	strb	r3, [r7, #7]
     uint8_t dataFormat;
     dataFormat = 0x01; // +-4g ayarı
 80040f6:	2301      	movs	r3, #1
 80040f8:	71bb      	strb	r3, [r7, #6]
     HAL_I2C_Mem_Write(&hi2c1,(ADXL_I2C_ADDR_AD0 <<1), ADXL_POWER_CTL_ADDR, 1, &data, 1, 100); // Ölçüm yapan ve 1hz olacak şekilde ayarladık.
 80040fa:	2364      	movs	r3, #100	; 0x64
 80040fc:	9302      	str	r3, [sp, #8]
 80040fe:	2301      	movs	r3, #1
 8004100:	9301      	str	r3, [sp, #4]
 8004102:	1dfb      	adds	r3, r7, #7
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	2301      	movs	r3, #1
 8004108:	222d      	movs	r2, #45	; 0x2d
 800410a:	21a6      	movs	r1, #166	; 0xa6
 800410c:	4809      	ldr	r0, [pc, #36]	; (8004134 <ADXL345_Init+0x48>)
 800410e:	f7fd fe05 	bl	8001d1c <HAL_I2C_Mem_Write>

     HAL_I2C_Mem_Write(&hi2c1, (ADXL_I2C_ADDR_AD0<<1), ADXL_DATA_FORMAT_ADRR, 1, &dataFormat, 1, 100); // +-4g ile ölçüm yapma ayarını yaptık.
 8004112:	2364      	movs	r3, #100	; 0x64
 8004114:	9302      	str	r3, [sp, #8]
 8004116:	2301      	movs	r3, #1
 8004118:	9301      	str	r3, [sp, #4]
 800411a:	1dbb      	adds	r3, r7, #6
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	2301      	movs	r3, #1
 8004120:	2231      	movs	r2, #49	; 0x31
 8004122:	21a6      	movs	r1, #166	; 0xa6
 8004124:	4803      	ldr	r0, [pc, #12]	; (8004134 <ADXL345_Init+0x48>)
 8004126:	f7fd fdf9 	bl	8001d1c <HAL_I2C_Mem_Write>
}
 800412a:	bf00      	nop
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20000028 	.word	0x20000028

08004138 <ADXL345_Read>:

void ADXL345_Read() // Ham X,Y,Z eksenlerinin ham değerlerinin okunması ve
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af04      	add	r7, sp, #16
	uint8_t buffer[6];


	HAL_I2C_Mem_Read(&hi2c1, (ADXL_I2C_ADDR_AD0 <<1), ADXL_DATAX0_ADDR  , 1, buffer, 6, 100);
 800413e:	2364      	movs	r3, #100	; 0x64
 8004140:	9302      	str	r3, [sp, #8]
 8004142:	2306      	movs	r3, #6
 8004144:	9301      	str	r3, [sp, #4]
 8004146:	463b      	mov	r3, r7
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	2301      	movs	r3, #1
 800414c:	2232      	movs	r2, #50	; 0x32
 800414e:	21a6      	movs	r1, #166	; 0xa6
 8004150:	4810      	ldr	r0, [pc, #64]	; (8004194 <ADXL345_Read+0x5c>)
 8004152:	f7fd fedd 	bl	8001f10 <HAL_I2C_Mem_Read>

   Raw_X = (int16_t)((buffer[1] << 8) | buffer[0]); // 8 bitlik iki veri yüksek ve düşük anlamlı olmalarına göre kaydırılarak 16 bitlik bir veri oluşturuluyor.
 8004156:	787b      	ldrb	r3, [r7, #1]
 8004158:	021b      	lsls	r3, r3, #8
 800415a:	b21a      	sxth	r2, r3
 800415c:	783b      	ldrb	r3, [r7, #0]
 800415e:	b21b      	sxth	r3, r3
 8004160:	4313      	orrs	r3, r2
 8004162:	b21a      	sxth	r2, r3
 8004164:	4b0c      	ldr	r3, [pc, #48]	; (8004198 <ADXL345_Read+0x60>)
 8004166:	801a      	strh	r2, [r3, #0]
   Raw_Y = (int16_t)((buffer[3] << 8) | buffer[2]); // Bu işlem sonucunda ham değerler oluşturulmuş olur.
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	021b      	lsls	r3, r3, #8
 800416c:	b21a      	sxth	r2, r3
 800416e:	78bb      	ldrb	r3, [r7, #2]
 8004170:	b21b      	sxth	r3, r3
 8004172:	4313      	orrs	r3, r2
 8004174:	b21a      	sxth	r2, r3
 8004176:	4b09      	ldr	r3, [pc, #36]	; (800419c <ADXL345_Read+0x64>)
 8004178:	801a      	strh	r2, [r3, #0]
   Raw_Z = (int16_t)((buffer[5] << 8) | buffer[4]);
 800417a:	797b      	ldrb	r3, [r7, #5]
 800417c:	021b      	lsls	r3, r3, #8
 800417e:	b21a      	sxth	r2, r3
 8004180:	793b      	ldrb	r3, [r7, #4]
 8004182:	b21b      	sxth	r3, r3
 8004184:	4313      	orrs	r3, r2
 8004186:	b21a      	sxth	r2, r3
 8004188:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <ADXL345_Read+0x68>)
 800418a:	801a      	strh	r2, [r3, #0]
}
 800418c:	bf00      	nop
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	20000028 	.word	0x20000028
 8004198:	200000c0 	.word	0x200000c0
 800419c:	200000c2 	.word	0x200000c2
 80041a0:	200000c4 	.word	0x200000c4

080041a4 <ADXL345_BufferX>:

float ADXL345_BufferX(float data) // X ekseni değerleri taskta verilen gereklilikler ölçüsünde burada tutuluyor.
{                                 // Taşma durumunda yeni gelen veri eski verinin yerine öncelikli olarak yazdırılıyor
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	ed87 0a01 	vstr	s0, [r7, #4]
	  if(buffer_CounterX == 10) {
 80041ae:	4b17      	ldr	r3, [pc, #92]	; (800420c <ADXL345_BufferX+0x68>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b0a      	cmp	r3, #10
 80041b4:	d118      	bne.n	80041e8 <ADXL345_BufferX+0x44>
	        // Buffer overflow, en eski veri siliniyor.
	        for(uint8_t i = 0; i < 10 - 1; i++) {
 80041b6:	2300      	movs	r3, #0
 80041b8:	73fb      	strb	r3, [r7, #15]
 80041ba:	e00d      	b.n	80041d8 <ADXL345_BufferX+0x34>
	            result_BufferX[i] = result_BufferX[i+1];
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
 80041c2:	4913      	ldr	r1, [pc, #76]	; (8004210 <ADXL345_BufferX+0x6c>)
 80041c4:	0092      	lsls	r2, r2, #2
 80041c6:	440a      	add	r2, r1
 80041c8:	6812      	ldr	r2, [r2, #0]
 80041ca:	4911      	ldr	r1, [pc, #68]	; (8004210 <ADXL345_BufferX+0x6c>)
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	440b      	add	r3, r1
 80041d0:	601a      	str	r2, [r3, #0]
	        for(uint8_t i = 0; i < 10 - 1; i++) {
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
 80041d4:	3301      	adds	r3, #1
 80041d6:	73fb      	strb	r3, [r7, #15]
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d9ee      	bls.n	80041bc <ADXL345_BufferX+0x18>
	        }
	        buffer_CounterX--;
 80041de:	4b0b      	ldr	r3, [pc, #44]	; (800420c <ADXL345_BufferX+0x68>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	3b01      	subs	r3, #1
 80041e4:	4a09      	ldr	r2, [pc, #36]	; (800420c <ADXL345_BufferX+0x68>)
 80041e6:	6013      	str	r3, [r2, #0]
	    }
	    result_BufferX[buffer_CounterX++] = data;
 80041e8:	4b08      	ldr	r3, [pc, #32]	; (800420c <ADXL345_BufferX+0x68>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	4907      	ldr	r1, [pc, #28]	; (800420c <ADXL345_BufferX+0x68>)
 80041f0:	600a      	str	r2, [r1, #0]
 80041f2:	4a07      	ldr	r2, [pc, #28]	; (8004210 <ADXL345_BufferX+0x6c>)
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	601a      	str	r2, [r3, #0]
     }
 80041fc:	bf00      	nop
 80041fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	20000154 	.word	0x20000154
 8004210:	200000dc 	.word	0x200000dc

08004214 <ADXL345_BufferY>:


float ADXL345_BufferY(float data){
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	ed87 0a01 	vstr	s0, [r7, #4]
	if(buffer_CounterY == 10) {
 800421e:	4b17      	ldr	r3, [pc, #92]	; (800427c <ADXL345_BufferY+0x68>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2b0a      	cmp	r3, #10
 8004224:	d118      	bne.n	8004258 <ADXL345_BufferY+0x44>
		        // Buffer overflow, en eski veri siliniyor.
		        for(uint8_t i = 0; i < 10 - 1; i++) {
 8004226:	2300      	movs	r3, #0
 8004228:	73fb      	strb	r3, [r7, #15]
 800422a:	e00d      	b.n	8004248 <ADXL345_BufferY+0x34>
		            result_BufferY[i] = result_BufferY[i+1];
 800422c:	7bfb      	ldrb	r3, [r7, #15]
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	7bfb      	ldrb	r3, [r7, #15]
 8004232:	4913      	ldr	r1, [pc, #76]	; (8004280 <ADXL345_BufferY+0x6c>)
 8004234:	0092      	lsls	r2, r2, #2
 8004236:	440a      	add	r2, r1
 8004238:	6812      	ldr	r2, [r2, #0]
 800423a:	4911      	ldr	r1, [pc, #68]	; (8004280 <ADXL345_BufferY+0x6c>)
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	440b      	add	r3, r1
 8004240:	601a      	str	r2, [r3, #0]
		        for(uint8_t i = 0; i < 10 - 1; i++) {
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	3301      	adds	r3, #1
 8004246:	73fb      	strb	r3, [r7, #15]
 8004248:	7bfb      	ldrb	r3, [r7, #15]
 800424a:	2b08      	cmp	r3, #8
 800424c:	d9ee      	bls.n	800422c <ADXL345_BufferY+0x18>
		        }
		        buffer_CounterY--;
 800424e:	4b0b      	ldr	r3, [pc, #44]	; (800427c <ADXL345_BufferY+0x68>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3b01      	subs	r3, #1
 8004254:	4a09      	ldr	r2, [pc, #36]	; (800427c <ADXL345_BufferY+0x68>)
 8004256:	6013      	str	r3, [r2, #0]
		    }
		    result_BufferY[buffer_CounterY++] = data;
 8004258:	4b08      	ldr	r3, [pc, #32]	; (800427c <ADXL345_BufferY+0x68>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	4907      	ldr	r1, [pc, #28]	; (800427c <ADXL345_BufferY+0x68>)
 8004260:	600a      	str	r2, [r1, #0]
 8004262:	4a07      	ldr	r2, [pc, #28]	; (8004280 <ADXL345_BufferY+0x6c>)
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	601a      	str	r2, [r3, #0]

}
 800426c:	bf00      	nop
 800426e:	eeb0 0a67 	vmov.f32	s0, s15
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	20000158 	.word	0x20000158
 8004280:	20000104 	.word	0x20000104

08004284 <ADXL345_BufferZ>:

float ADXL345_BufferZ(float data){
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	ed87 0a01 	vstr	s0, [r7, #4]

	if(buffer_CounterZ == 10) {
 800428e:	4b17      	ldr	r3, [pc, #92]	; (80042ec <ADXL345_BufferZ+0x68>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2b0a      	cmp	r3, #10
 8004294:	d118      	bne.n	80042c8 <ADXL345_BufferZ+0x44>
		        // Buffer overflow, en eski veri siliniyor.
		        for(uint8_t i = 0; i < 10 - 1; i++) {
 8004296:	2300      	movs	r3, #0
 8004298:	73fb      	strb	r3, [r7, #15]
 800429a:	e00d      	b.n	80042b8 <ADXL345_BufferZ+0x34>
		            result_BufferZ[i] = result_BufferZ[i+1];
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	1c5a      	adds	r2, r3, #1
 80042a0:	7bfb      	ldrb	r3, [r7, #15]
 80042a2:	4913      	ldr	r1, [pc, #76]	; (80042f0 <ADXL345_BufferZ+0x6c>)
 80042a4:	0092      	lsls	r2, r2, #2
 80042a6:	440a      	add	r2, r1
 80042a8:	6812      	ldr	r2, [r2, #0]
 80042aa:	4911      	ldr	r1, [pc, #68]	; (80042f0 <ADXL345_BufferZ+0x6c>)
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	440b      	add	r3, r1
 80042b0:	601a      	str	r2, [r3, #0]
		        for(uint8_t i = 0; i < 10 - 1; i++) {
 80042b2:	7bfb      	ldrb	r3, [r7, #15]
 80042b4:	3301      	adds	r3, #1
 80042b6:	73fb      	strb	r3, [r7, #15]
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
 80042ba:	2b08      	cmp	r3, #8
 80042bc:	d9ee      	bls.n	800429c <ADXL345_BufferZ+0x18>
		        }
		        buffer_CounterZ--;
 80042be:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <ADXL345_BufferZ+0x68>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	4a09      	ldr	r2, [pc, #36]	; (80042ec <ADXL345_BufferZ+0x68>)
 80042c6:	6013      	str	r3, [r2, #0]
		    }
		    result_BufferZ[buffer_CounterZ++] = data;
 80042c8:	4b08      	ldr	r3, [pc, #32]	; (80042ec <ADXL345_BufferZ+0x68>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	4907      	ldr	r1, [pc, #28]	; (80042ec <ADXL345_BufferZ+0x68>)
 80042d0:	600a      	str	r2, [r1, #0]
 80042d2:	4a07      	ldr	r2, [pc, #28]	; (80042f0 <ADXL345_BufferZ+0x6c>)
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	601a      	str	r2, [r3, #0]
}
 80042dc:	bf00      	nop
 80042de:	eeb0 0a67 	vmov.f32	s0, s15
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	2000015c 	.word	0x2000015c
 80042f0:	2000012c 	.word	0x2000012c

080042f4 <TrimRead>:
int32_t tempRaw;
int16_t result_Buffer[10];
int buffer_Counter = 0;


void TrimRead(void){   // Trimming Paramater okuması yapılıyor.Alınan verilerin kalibrasyonunun doğru şekilde yapılmasını sağlıyor.
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af04      	add	r7, sp, #16

	uint8_t trimData[6];

	HAL_I2C_Mem_Read(&hi2c1, (BMP280_I2C_SD0_0 << 1 ), 0x88, 1, trimData, 6, 100);
 80042fa:	2364      	movs	r3, #100	; 0x64
 80042fc:	9302      	str	r3, [sp, #8]
 80042fe:	2306      	movs	r3, #6
 8004300:	9301      	str	r3, [sp, #4]
 8004302:	463b      	mov	r3, r7
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	2301      	movs	r3, #1
 8004308:	2288      	movs	r2, #136	; 0x88
 800430a:	21ec      	movs	r1, #236	; 0xec
 800430c:	4811      	ldr	r0, [pc, #68]	; (8004354 <TrimRead+0x60>)
 800430e:	f7fd fdff 	bl	8001f10 <HAL_I2C_Mem_Read>

      dig_T1 = (trimData[1] << 8) | trimData[0]; /* 16 bit tamsayı olarak tutulan Trimming parametrelerinin LSB ve MSB bitleri 8 bit kaydırılarak sola doğru ortaya anlamlı bir sayı çıkarılır.*/
 8004312:	787b      	ldrb	r3, [r7, #1]
 8004314:	021b      	lsls	r3, r3, #8
 8004316:	b21a      	sxth	r2, r3
 8004318:	783b      	ldrb	r3, [r7, #0]
 800431a:	b21b      	sxth	r3, r3
 800431c:	4313      	orrs	r3, r2
 800431e:	b21b      	sxth	r3, r3
 8004320:	b29a      	uxth	r2, r3
 8004322:	4b0d      	ldr	r3, [pc, #52]	; (8004358 <TrimRead+0x64>)
 8004324:	801a      	strh	r2, [r3, #0]
      dig_T2 = (trimData[3] << 8) | trimData[2]; // Daha sonra oluşan bu değerler int16_t türünde değişkenlere atanır.
 8004326:	78fb      	ldrb	r3, [r7, #3]
 8004328:	021b      	lsls	r3, r3, #8
 800432a:	b21a      	sxth	r2, r3
 800432c:	78bb      	ldrb	r3, [r7, #2]
 800432e:	b21b      	sxth	r3, r3
 8004330:	4313      	orrs	r3, r2
 8004332:	b21a      	sxth	r2, r3
 8004334:	4b09      	ldr	r3, [pc, #36]	; (800435c <TrimRead+0x68>)
 8004336:	801a      	strh	r2, [r3, #0]
      dig_T3 = (trimData[5] << 8) | trimData[4];
 8004338:	797b      	ldrb	r3, [r7, #5]
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	b21a      	sxth	r2, r3
 800433e:	793b      	ldrb	r3, [r7, #4]
 8004340:	b21b      	sxth	r3, r3
 8004342:	4313      	orrs	r3, r2
 8004344:	b21a      	sxth	r2, r3
 8004346:	4b06      	ldr	r3, [pc, #24]	; (8004360 <TrimRead+0x6c>)
 8004348:	801a      	strh	r2, [r3, #0]


}
 800434a:	bf00      	nop
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	20000028 	.word	0x20000028
 8004358:	20000160 	.word	0x20000160
 800435c:	20000162 	.word	0x20000162
 8004360:	20000164 	.word	0x20000164

08004364 <BMP280_ReadRaw>:

int BMP280_ReadRaw(){  // Ham sıcaklık verisi okuması yapılır burada.
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af04      	add	r7, sp, #16

	uint8_t RawData[3];
	HAL_I2C_Mem_Read(&hi2c1,(BMP280_I2C_SD0_0 << 1), BMP280_TEMP_MSB_ADDR , 1, RawData, 3, 100);
 800436a:	2364      	movs	r3, #100	; 0x64
 800436c:	9302      	str	r3, [sp, #8]
 800436e:	2303      	movs	r3, #3
 8004370:	9301      	str	r3, [sp, #4]
 8004372:	1d3b      	adds	r3, r7, #4
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	2301      	movs	r3, #1
 8004378:	22fa      	movs	r2, #250	; 0xfa
 800437a:	21ec      	movs	r1, #236	; 0xec
 800437c:	4809      	ldr	r0, [pc, #36]	; (80043a4 <BMP280_ReadRaw+0x40>)
 800437e:	f7fd fdc7 	bl	8001f10 <HAL_I2C_Mem_Read>

	tempRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4); // tempRaw değişkenine atamadan önce RawData'nın 3byte'ı birleştirilir.
 8004382:	793b      	ldrb	r3, [r7, #4]
 8004384:	031a      	lsls	r2, r3, #12
 8004386:	797b      	ldrb	r3, [r7, #5]
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	4313      	orrs	r3, r2
 800438c:	79ba      	ldrb	r2, [r7, #6]
 800438e:	0912      	lsrs	r2, r2, #4
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	4313      	orrs	r3, r2
 8004394:	4a04      	ldr	r2, [pc, #16]	; (80043a8 <BMP280_ReadRaw+0x44>)
 8004396:	6013      	str	r3, [r2, #0]
}  /* BMP280 sıcaklık değerini 3 byte şeklinde depolar.MSB,LSB ve XLSB şeklinde bunların birleştirilme işlemi yapılır aslında.*/
 8004398:	bf00      	nop
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20000028 	.word	0x20000028
 80043a8:	20000168 	.word	0x20000168

080043ac <BMP280_compensate_T_int32>:

int32_t t_fine;
int32_t BMP280_compensate_T_int32(int32_t adc_T)  // Okuması yapılan ham sıcaklık değerleri bu fonksiyon ile düzeltilir ve buna değer döndürülür.
{                                                 /* Bu fonksiyon üretici firmanın datasheet dosyasında paylaştığı ve kullanılmasını istediği fonksiyondur.*/
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	10da      	asrs	r2, r3, #3
 80043b8:	4b19      	ldr	r3, [pc, #100]	; (8004420 <BMP280_compensate_T_int32+0x74>)
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	4a18      	ldr	r2, [pc, #96]	; (8004424 <BMP280_compensate_T_int32+0x78>)
 80043c2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80043c6:	fb02 f303 	mul.w	r3, r2, r3
 80043ca:	12db      	asrs	r3, r3, #11
 80043cc:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	111b      	asrs	r3, r3, #4
 80043d2:	4a13      	ldr	r2, [pc, #76]	; (8004420 <BMP280_compensate_T_int32+0x74>)
 80043d4:	8812      	ldrh	r2, [r2, #0]
 80043d6:	1a9b      	subs	r3, r3, r2
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	1112      	asrs	r2, r2, #4
 80043dc:	4910      	ldr	r1, [pc, #64]	; (8004420 <BMP280_compensate_T_int32+0x74>)
 80043de:	8809      	ldrh	r1, [r1, #0]
 80043e0:	1a52      	subs	r2, r2, r1
 80043e2:	fb02 f303 	mul.w	r3, r2, r3
 80043e6:	131b      	asrs	r3, r3, #12
 80043e8:	4a0f      	ldr	r2, [pc, #60]	; (8004428 <BMP280_compensate_T_int32+0x7c>)
 80043ea:	f9b2 2000 	ldrsh.w	r2, [r2]
 80043ee:	fb02 f303 	mul.w	r3, r2, r3
 80043f2:	139b      	asrs	r3, r3, #14
 80043f4:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	4413      	add	r3, r2
 80043fc:	4a0b      	ldr	r2, [pc, #44]	; (800442c <BMP280_compensate_T_int32+0x80>)
 80043fe:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8004400:	4b0a      	ldr	r3, [pc, #40]	; (800442c <BMP280_compensate_T_int32+0x80>)
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	4613      	mov	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	3380      	adds	r3, #128	; 0x80
 800440c:	121b      	asrs	r3, r3, #8
 800440e:	60fb      	str	r3, [r7, #12]
	return T;
 8004410:	68fb      	ldr	r3, [r7, #12]
}
 8004412:	4618      	mov	r0, r3
 8004414:	371c      	adds	r7, #28
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	20000160 	.word	0x20000160
 8004424:	20000162 	.word	0x20000162
 8004428:	20000164 	.word	0x20000164
 800442c:	20000184 	.word	0x20000184

08004430 <BMP280_Init>:



void BMP280_Init(){  // Okuma yapabilmek için 0xF4 ve 0xF5 adresli registerlara gerekli ve istenilen değerler girilir.
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af04      	add	r7, sp, #16
                     // Bit ayarlamaları için hesaplamalar yapılmış ve hex karşılıkları o adreslere girilmiştir.
	uint8_t measure; // Gerekli bilgiler dökümantasyon kısmında paylaşılmıştır.
	measure = 0xE3;
 8004436:	23e3      	movs	r3, #227	; 0xe3
 8004438:	71fb      	strb	r3, [r7, #7]

	uint8_t standBy;
	standBy = 0x60;
 800443a:	2360      	movs	r3, #96	; 0x60
 800443c:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Write(&hi2c1, (BMP280_I2C_SD0_0 << 1), BMP280_CTRL_MEAS_ADDR, 1, &measure, 1, 100); // Sampling ayarı girildi.
 800443e:	2364      	movs	r3, #100	; 0x64
 8004440:	9302      	str	r3, [sp, #8]
 8004442:	2301      	movs	r3, #1
 8004444:	9301      	str	r3, [sp, #4]
 8004446:	1dfb      	adds	r3, r7, #7
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	2301      	movs	r3, #1
 800444c:	22f4      	movs	r2, #244	; 0xf4
 800444e:	21ec      	movs	r1, #236	; 0xec
 8004450:	480a      	ldr	r0, [pc, #40]	; (800447c <BMP280_Init+0x4c>)
 8004452:	f7fd fc63 	bl	8001d1c <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004456:	2064      	movs	r0, #100	; 0x64
 8004458:	f7fc ffb8 	bl	80013cc <HAL_Delay>
	HAL_I2C_Mem_Write(&hi2c1, (BMP280_I2C_SD0_0 << 1), BMP280_CONFIG_ADDR, 1, &standBy, 1, 100); // StandBy 250 ms olarak ayarlandı.
 800445c:	2364      	movs	r3, #100	; 0x64
 800445e:	9302      	str	r3, [sp, #8]
 8004460:	2301      	movs	r3, #1
 8004462:	9301      	str	r3, [sp, #4]
 8004464:	1dbb      	adds	r3, r7, #6
 8004466:	9300      	str	r3, [sp, #0]
 8004468:	2301      	movs	r3, #1
 800446a:	22f5      	movs	r2, #245	; 0xf5
 800446c:	21ec      	movs	r1, #236	; 0xec
 800446e:	4803      	ldr	r0, [pc, #12]	; (800447c <BMP280_Init+0x4c>)
 8004470:	f7fd fc54 	bl	8001d1c <HAL_I2C_Mem_Write>

}
 8004474:	bf00      	nop
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	20000028 	.word	0x20000028

08004480 <BMP280_BufferData>:

void BMP280_BufferData(int data){ // Taskta istenen verilerin tutulması için bir buffer oluşturulmuştur.
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
                                  // Counter ve bu algoritma sayesinde taşma durumunda eski veriler silinip yerlerine yeni veriler ekleniyor.
	if(buffer_Counter == 10) {
 8004488:	4b15      	ldr	r3, [pc, #84]	; (80044e0 <BMP280_BufferData+0x60>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2b0a      	cmp	r3, #10
 800448e:	d116      	bne.n	80044be <BMP280_BufferData+0x3e>
		        // Buffer overflow, en eski veri siliniyor.
		        for(uint8_t i = 0; i < 10 - 1; i++) {
 8004490:	2300      	movs	r3, #0
 8004492:	73fb      	strb	r3, [r7, #15]
 8004494:	e00b      	b.n	80044ae <BMP280_BufferData+0x2e>
		            result_Buffer[i] = result_Buffer[i+1];
 8004496:	7bfb      	ldrb	r3, [r7, #15]
 8004498:	1c5a      	adds	r2, r3, #1
 800449a:	7bfb      	ldrb	r3, [r7, #15]
 800449c:	4911      	ldr	r1, [pc, #68]	; (80044e4 <BMP280_BufferData+0x64>)
 800449e:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80044a2:	4a10      	ldr	r2, [pc, #64]	; (80044e4 <BMP280_BufferData+0x64>)
 80044a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		        for(uint8_t i = 0; i < 10 - 1; i++) {
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
 80044aa:	3301      	adds	r3, #1
 80044ac:	73fb      	strb	r3, [r7, #15]
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	d9f0      	bls.n	8004496 <BMP280_BufferData+0x16>
		        }
		        buffer_Counter--;
 80044b4:	4b0a      	ldr	r3, [pc, #40]	; (80044e0 <BMP280_BufferData+0x60>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3b01      	subs	r3, #1
 80044ba:	4a09      	ldr	r2, [pc, #36]	; (80044e0 <BMP280_BufferData+0x60>)
 80044bc:	6013      	str	r3, [r2, #0]
		    }
		    result_Buffer[buffer_Counter++] = data;
 80044be:	4b08      	ldr	r3, [pc, #32]	; (80044e0 <BMP280_BufferData+0x60>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	4906      	ldr	r1, [pc, #24]	; (80044e0 <BMP280_BufferData+0x60>)
 80044c6:	600a      	str	r2, [r1, #0]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	b211      	sxth	r1, r2
 80044cc:	4a05      	ldr	r2, [pc, #20]	; (80044e4 <BMP280_BufferData+0x64>)
 80044ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 80044d2:	bf00      	nop
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	20000180 	.word	0x20000180
 80044e4:	2000016c 	.word	0x2000016c

080044e8 <__libc_init_array>:
 80044e8:	b570      	push	{r4, r5, r6, lr}
 80044ea:	4d0d      	ldr	r5, [pc, #52]	; (8004520 <__libc_init_array+0x38>)
 80044ec:	4c0d      	ldr	r4, [pc, #52]	; (8004524 <__libc_init_array+0x3c>)
 80044ee:	1b64      	subs	r4, r4, r5
 80044f0:	10a4      	asrs	r4, r4, #2
 80044f2:	2600      	movs	r6, #0
 80044f4:	42a6      	cmp	r6, r4
 80044f6:	d109      	bne.n	800450c <__libc_init_array+0x24>
 80044f8:	4d0b      	ldr	r5, [pc, #44]	; (8004528 <__libc_init_array+0x40>)
 80044fa:	4c0c      	ldr	r4, [pc, #48]	; (800452c <__libc_init_array+0x44>)
 80044fc:	f000 f820 	bl	8004540 <_init>
 8004500:	1b64      	subs	r4, r4, r5
 8004502:	10a4      	asrs	r4, r4, #2
 8004504:	2600      	movs	r6, #0
 8004506:	42a6      	cmp	r6, r4
 8004508:	d105      	bne.n	8004516 <__libc_init_array+0x2e>
 800450a:	bd70      	pop	{r4, r5, r6, pc}
 800450c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004510:	4798      	blx	r3
 8004512:	3601      	adds	r6, #1
 8004514:	e7ee      	b.n	80044f4 <__libc_init_array+0xc>
 8004516:	f855 3b04 	ldr.w	r3, [r5], #4
 800451a:	4798      	blx	r3
 800451c:	3601      	adds	r6, #1
 800451e:	e7f2      	b.n	8004506 <__libc_init_array+0x1e>
 8004520:	08004578 	.word	0x08004578
 8004524:	08004578 	.word	0x08004578
 8004528:	08004578 	.word	0x08004578
 800452c:	0800457c 	.word	0x0800457c

08004530 <memset>:
 8004530:	4402      	add	r2, r0
 8004532:	4603      	mov	r3, r0
 8004534:	4293      	cmp	r3, r2
 8004536:	d100      	bne.n	800453a <memset+0xa>
 8004538:	4770      	bx	lr
 800453a:	f803 1b01 	strb.w	r1, [r3], #1
 800453e:	e7f9      	b.n	8004534 <memset+0x4>

08004540 <_init>:
 8004540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004542:	bf00      	nop
 8004544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004546:	bc08      	pop	{r3}
 8004548:	469e      	mov	lr, r3
 800454a:	4770      	bx	lr

0800454c <_fini>:
 800454c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454e:	bf00      	nop
 8004550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004552:	bc08      	pop	{r3}
 8004554:	469e      	mov	lr, r3
 8004556:	4770      	bx	lr
